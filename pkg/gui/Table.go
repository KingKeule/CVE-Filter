package gui

import (
	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/widget"
	"github.com/KingKeule/CVE-Filter/pkg/model"
)

var tableHeadlineShort = []string{"CVE ID", "CVSS", "Score", "AV", "AC", "PR", "UI", "S", "AU", "C", "I", "A"}
var tableHeadlineLong = []string{"CVE ID", "CVSS version", "Base Score", "Attack Vector", "Attack Complexity", "Privileges Required", "User interaction", "Scope", "Authentication", "Confidentiality", "Integrity", "Availability"}
var tableHeadlineLongExport = []string{"CVE ID", "CVSS version", "Base Score", "BaseSeverity", "Attack Vector", "Attack Complexity", "Privileges Required", "User interaction", "Scope", "Authentication", "Confidentiality", "Integrity", "Availability", "Description"}

var tableCVEBody *widget.Table

// Create a table for the headline or body.
func createCVETable(headline bool) *widget.Table {
	numRows := 1

	table := widget.NewTable(
		// set the size of the table
		func() (int, int) {
			return numRows, len(tableHeadlineShort)
		},
		// define the type of the cell
		func() fyne.CanvasObject {
			return widget.NewLabelWithStyle("", fyne.TextAlignLeading, fyne.TextStyle{Bold: false})
		},
		// define the update mechanism of all cells
		func(id widget.TableCellID, cell fyne.CanvasObject) {
			if headline {
				switch id.Row {
				case 0:
					cell.(*widget.Label).TextStyle = fyne.TextStyle{Bold: true}
					cell.(*widget.Label).SetText(tableHeadlineShort[id.Col])
				}
			}
		})

	// set the table column width for each CVE metric
	table.SetColumnWidth(0, 130) // CVE Id
	table.SetColumnWidth(1, 50)  // CVSS version
	table.SetColumnWidth(2, 60)  // Score
	table.SetColumnWidth(3, 90)  // AV
	table.SetColumnWidth(4, 72)  // AC
	table.SetColumnWidth(5, 60)  // PR
	table.SetColumnWidth(6, 90)  // UI
	table.SetColumnWidth(7, 106) // S
	table.SetColumnWidth(8, 80)  // AU
	table.SetColumnWidth(9, 60)  // C
	table.SetColumnWidth(10, 60) // I
	table.SetColumnWidth(11, 60) // A

	return table
}

func updateCVETable(tableCVE *widget.Table, listOfCVEs []model.CVE) {
	var tableData = [][]string{}

	if listOfCVEs == nil {
		tableCVE.Length = func() (int, int) {
			return 1, len(tableHeadlineShort)
		}
		tableCVE.UpdateCell = func(_ widget.TableCellID, template fyne.CanvasObject) {
			template.(*widget.Label).SetText("")
		}
	} else {
		for _, cve := range listOfCVEs {
			tmpArray := model.ConvCVEStruct(cve, len(tableHeadlineShort), false)
			tableData = append(tableData, tmpArray)
		}

		numRows := len(tableData)
		tableCVE.Length = func() (int, int) {
			return numRows, len(tableHeadlineShort)
		}

		tableCVE.UpdateCell = func(id widget.TableCellID, template fyne.CanvasObject) {
			template.(*widget.Label).SetText(tableData[id.Row][id.Col])
		}
	}

	// Necessary because otherwise the update of the cells is not displayed.
	tableCVE.Refresh()
}

func tableHeadlineSelect(tableHeadline *widget.Table, id widget.TableCellID) {
	// Sort the table when the headline ID widget is clicked
	if id.Col == 0 && id.Row == 0 {
		tableHeadline.Unselect(id)
		if !idSortedHightoDown {
			if guiFilterActive {
				sortedCVE := model.SortYear(model.ListOfFilteredCVEs, true)
				updateCVETable(tableCVEBody, sortedCVE)
			} else {
				sortedCVE := model.SortYear(model.ListOfCVEs, true)
				updateCVETable(tableCVEBody, sortedCVE)
			}
			idSortedHightoDown = true
		} else {
			if guiFilterActive {
				sortedCVE := model.SortYear(model.ListOfFilteredCVEs, false)
				updateCVETable(tableCVEBody, sortedCVE)
			} else {
				sortedCVE := model.SortYear(model.ListOfCVEs, false)
				updateCVETable(tableCVEBody, sortedCVE)
			}
			idSortedHightoDown = false
		}
		scoreSortedHightoDown = false //side effect on the other sort
	}

	// Sort the table when the headline CVSS widget is clicked
	if id.Col == 1 && id.Row == 0 {
		tableHeadline.Unselect(id)
		if !idSortedHightoDown {
			if guiFilterActive {
				sortedCVE := model.SortCVSSVersionScore(model.ListOfFilteredCVEs, true)
				updateCVETable(tableCVEBody, sortedCVE)
			} else {
				sortedCVE := model.SortCVSSVersionScore(model.ListOfCVEs, true)
				updateCVETable(tableCVEBody, sortedCVE)
			}
			idSortedHightoDown = true
		} else {
			if guiFilterActive {
				sortedCVE := model.SortCVSSVersionScore(model.ListOfFilteredCVEs, false)
				updateCVETable(tableCVEBody, sortedCVE)
			} else {
				sortedCVE := model.SortCVSSVersionScore(model.ListOfCVEs, false)
				updateCVETable(tableCVEBody, sortedCVE)
			}
			idSortedHightoDown = false
		}
		scoreSortedHightoDown = false //side effect on the other sort
	}

	// Sort the table when the headline base score widget is clicked
	if id.Col == 2 && id.Row == 0 {
		tableHeadline.Unselect(id)
		if !scoreSortedHightoDown {
			if guiFilterActive {
				sortedCVE := model.SortBaseScore(model.ListOfFilteredCVEs, true)
				updateCVETable(tableCVEBody, sortedCVE)
			} else {
				sortedCVE := model.SortBaseScore(model.ListOfCVEs, true)
				updateCVETable(tableCVEBody, sortedCVE)
			}
			scoreSortedHightoDown = true
		} else {
			if guiFilterActive {
				sortedCVE := model.SortBaseScore(model.ListOfFilteredCVEs, false)
				updateCVETable(tableCVEBody, sortedCVE)
			} else {
				sortedCVE := model.SortBaseScore(model.ListOfCVEs, false)
				updateCVETable(tableCVEBody, sortedCVE)
			}
			scoreSortedHightoDown = false
		}
		idSortedHightoDown = false //side effect on the other sort
	}
}

func tableBodySelect(window fyne.Window, tableBody *widget.Table, id widget.TableCellID) {
	// Show the description of the CVE when the CVE id widget is clicked
	if id.Col == 0 {
		tableBody.Unselect(id)
		if guiFilterActive && model.ListOfFilteredCVEs != nil {
			customDialog := createInfoDialog(window, "Description of "+model.ListOfFilteredCVEs[id.Row].ID, model.ListOfFilteredCVEs[id.Row].Description)
			customDialog.Show()
		} else if model.ListOfCVEs != nil {
			customDialog := createInfoDialog(window, "Description of "+model.ListOfCVEs[id.Row].ID, model.ListOfCVEs[id.Row].Description)
			customDialog.Show()
		}
	}
}
