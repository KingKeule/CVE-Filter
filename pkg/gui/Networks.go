package gui

import (
	"log"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/data/validation"
	"fyne.io/fyne/v2/widget"
	"github.com/KingKeule/CVE-Filter/pkg/model"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

var sysProxyAct bool
var sysProxySel string
var sysProxyOptPos = []string{"Script", "Manual"}

// Create the container for network configuration
func createNetworkContainer(bindingDataPoolGui model.BindingDataGui) fyne.CanvasObject {

	NVDApiURL := widget.NewEntryWithData(bindingDataPoolGui.NVDApiURLData)
	NVDDetailURL := widget.NewEntryWithData(bindingDataPoolGui.NVDDetailURLData)

	validatorInt := validation.NewRegexp(`^\d+$`, "Input is not a valid integer.")

	downloadDelay := widget.NewEntryWithData(bindingDataPoolGui.DownloadDelaySecData)
	downloadDelay.Validator = validatorInt

	networkTimeout := widget.NewEntryWithData(bindingDataPoolGui.NetworkTimeoutSecData)
	networkTimeout.Validator = validatorInt

	logNetRaw := widget.NewCheck("", func(checkValue bool) {
		bindingDataPoolGui.LogNetworkRaw.Set(checkValue)
	})

	networkGen := widget.NewLabelWithStyle("General", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	networkForm := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "NVD API URL :", Widget: NVDApiURL},
			{Text: "NVD detail URL :", Widget: NVDDetailURL},
			{Text: "Slow download delay [s] :", Widget: downloadDelay},
			{Text: "Network timeout [s] :", Widget: networkTimeout},
			{Text: "Log raw responses :", Widget: logNetRaw}},
	}

	ProxyURL := widget.NewEntryWithData(bindingDataPoolGui.ProxyData)
	ProxyURL.SetPlaceHolder("URL  or  IP:Port")

	// Confugratuon of the use of the windows proxy system
	checkBoxSysProxy := widget.NewCheck("", func(checkValue bool) {
		sysProxyAct = checkValue
		setProxyURL(bindingDataPoolGui.ProxyData, ProxyURL)
	})

	// Select of the windows proxy system options
	sysProxyOpt := widget.NewRadioGroup(sysProxyOptPos, func(selected string) {
		sysProxySel = selected
		setProxyURL(bindingDataPoolGui.ProxyData, ProxyURL)
	})
	sysProxyOpt.Horizontal = true
	sysProxyOpt.Selected = sysProxyOptPos[0]
	sysProxySel = sysProxyOptPos[0]

	sysProxyCont := container.NewHBox(checkBoxSysProxy, widget.NewLabelWithStyle(" |     Type : ", fyne.TextAlignLeading, fyne.TextStyle{Bold: true}), sysProxyOpt)

	networkProx := widget.NewLabelWithStyle("Proxy", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	networkProxyForm := &widget.Form{
		Items: []*widget.FormItem{
			{Text: "Use system proxy settings : ", Widget: sysProxyCont},
			{Text: "Proxy :", Widget: ProxyURL}},
	}

	networkConfigCont := container.NewVBox(customSpacerSm, networkGen, customSpacerSm, networkForm, widget.NewSeparator(), networkProx, customSpacerSm, networkProxyForm)

	return networkConfigCont
}

func setProxyURL(proxyData binding.String, ProxyURL *widget.Entry) {
	if sysProxyAct {
		_, winUserProxyServer, winUserProxySrcipt, err := service.GetWinUserProxy()
		if err != nil {
			log.Println("Error while reading the Windows system proxy settings.")
			ProxyURL.SetText("ERROR. See log for details.")
		} else if sysProxySel == sysProxyOptPos[0] {
			log.Printf("Use the Windows system proxy settings \"%s\".", sysProxyOptPos[0])
			ProxyURL.SetText(winUserProxySrcipt)
			proxyData.Set(winUserProxySrcipt)
		} else {
			log.Printf("Use the Windows system proxy settings \"%s\".", sysProxyOptPos[1])
			ProxyURL.SetText(winUserProxyServer)
			proxyData.Set(winUserProxyServer)
		}
	} else {
		log.Println("Use the user configured proxy data instead of the Windows system proxy settings.")
		ProxyURL.SetText("")
	}
}
