package gui

import (
	"log"
	"os/exec"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/dialog"
	"github.com/KingKeule/CVE-Filter/pkg/config"
	"github.com/KingKeule/CVE-Filter/pkg/model"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

// Create the main menu
func createMenu(actCVEFilter config.CVEFilter, window fyne.Window) *fyne.MainMenu {
	log.Println("Create the menu bar.")

	menuResetData := fyne.NewMenuItem("Reset data", func() {
		log.Println("All downloaded information will be reset.")
		model.ListOfCVEs = nil
		model.ListOfFilteredCVEs = nil
		updateCVETable(tableCVEBody, nil)
		changeFilterMode(false)
		updateStaticsLabel(true)
	})

	menuExportALLtoCSV := fyne.NewMenuItem("All to CSV", func() {
		if model.ListOfCVEs == nil {
			dialog.ShowInformation("", "No CVE available to export.\nPlease download the CVE information first.", window)
			return
		}

		exportFileName := "CVE-Filter_Export_ALL.csv"
		resultExpDialog := make(chan string)
		exportDialog := createExportDialog(window, exportFileName, resultExpDialog)
		exportDialog.Show()

		go func() {
			fileURI := <-resultExpDialog
			if fileURI != "" {
				err := service.ExportCVEListasCSV(fileURI, tableHeadlineLongExport, model.ListOfCVEs)
				if err != nil {
					dialog.ShowInformation("", "A problem occured while exporting the CVE information.\n See log for more details.", window)
				}
			}
		}()
	})

	menuExportFilteredtoCSV := fyne.NewMenuItem("Filtered to CSV", func() {
		if model.ListOfFilteredCVEs == nil {
			dialog.ShowInformation("", "No filtered CVE available to export.\nPlease download and filter the CVE information first.", window)
			return
		}

		exportFileName := "CVE-Filter_Export_Filtered.csv"
		resultExpDialog := make(chan string)
		exportDialog := createExportDialog(window, exportFileName, resultExpDialog)
		exportDialog.Show()

		go func() {
			fileURI := <-resultExpDialog
			if fileURI != "" {
				err := service.ExportCVEListasCSV(fileURI, tableHeadlineLongExport, model.ListOfFilteredCVEs)
				if err != nil {
					dialog.ShowInformation("", "A problem occured while exporting the CVE information.\n See log for more details.", window)
				}
			}
		}()
	})

	menuExport := fyne.NewMenuItem("Export data", nil)
	menuExport.ChildMenu = fyne.NewMenu("", menuExportALLtoCSV, menuExportFilteredtoCSV)

	menuImportCSV := fyne.NewMenuItem("From CSV", func() {
		resultImpDialog := make(chan string)
		importDialog := createImportDialog(window, resultImpDialog)
		importDialog.Show()

		go func() {
			fileURI := <-resultImpDialog
			if fileURI != "" {
				err, importData := service.ImportCVEListasCSV(fileURI)
				if err != nil {
					dialog.ShowInformation("", "A problem occured while importing the CSV file.\n See log for more details.", window)
					return
				}

				if importData != nil {
					err := error(nil)
					model.ListOfCVEs, err = model.ConvertCSVStringsToCVEs(importData)
					if err != nil {
						dialog.ShowInformation("", "A problem occured while importing the CSV file.\n See log for more details.", window)
						return
					}
				}

				updateCVETable(tableCVEBody, model.ListOfCVEs)
				changeFilterMode(false)
				updateStaticsLabel(false)
			}
		}()
	})

	menuImport := fyne.NewMenuItem("Import data", nil)
	menuImport.ChildMenu = fyne.NewMenu("", menuImportCSV)

	menuFilterSave := fyne.NewMenuItem("Save filter", func() {
		error := config.WriteCVEFilterToFile(actCVEFilter)
		if error {
			dialog.ShowInformation("", "Error while saving.\n See log for more details.", window)
		} else {
			dialog.ShowInformation("", "Configuration file \""+config.ConfigFileName+"\"\n was saved successfully", window)
		}
	})

	menuFilterAllOn := fyne.NewMenuItem("All filters on", func() {
		config.FilterAllOn(actCVEFilter)
	})

	menuFilterAllOff := fyne.NewMenuItem("All filters off", func() {
		config.FilterAllOff(actCVEFilter)
	})

	menuFilter := fyne.NewMenuItem("Filter", nil)
	menuFilter.ChildMenu = fyne.NewMenu("", menuFilterSave, menuFilterAllOn, menuFilterAllOff)

	menuThemeSwitchDark := fyne.NewMenuItem("Dark", func() {
		CVEFilter.Settings().SetTheme(&customTheme{"Dark"})
	})

	menuThemeSwitchLight := fyne.NewMenuItem("Light", func() {
		CVEFilter.Settings().SetTheme(&customTheme{"Light"})
	})

	menuTheme := fyne.NewMenuItem("Theme", nil)
	menuTheme.ChildMenu = fyne.NewMenu("", menuThemeSwitchLight, menuThemeSwitchDark)

	menuHelpLog := fyne.NewMenuItem("Show Log", func() {
		showWindowsConsole(true)
	})

	menuHelpCVSS := fyne.NewMenuItem("CVSS Wiki", func() {
		// windows command to open the browser with the given link
		exec.Command("rundll32", "url.dll,FileProtocolHandler", cvssLink).Start()
		log.Println("Open the cvss documentation site from FIRST.")
	})

	menuHelpAbout := fyne.NewMenuItem("About CVE-Filter", func() {
		// windows command to open the browser with the given link
		exec.Command("rundll32", "url.dll,FileProtocolHandler", gitHubLink).Start()
		log.Println("Open the github site from the CVE Filter project.")
	})

	menuTool := fyne.NewMenu("Tool", menuResetData, menuExport, menuImport, menuFilter, menuTheme)
	menuHelp := fyne.NewMenu("Help", menuHelpLog, menuHelpCVSS, menuHelpAbout)

	return fyne.NewMainMenu(menuTool, menuHelp)
}
