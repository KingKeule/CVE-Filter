package gui

import (
	"image/color"
	"log"
	"regexp"
	"strconv"
	"syscall"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"

	"github.com/KingKeule/CVE-Filter/pkg/config"
	"github.com/KingKeule/CVE-Filter/pkg/gui/img"
	"github.com/KingKeule/CVE-Filter/pkg/model"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

var screenWidthExt float32 = 310
var menuHeight float32 = 26
var customSpacerSm = canvas.NewRectangle(color.Transparent)
var customSpacerLg = widget.NewLabel("")

var guiFilterActive = false
var scoreSortedHightoDown = false
var idSortedHightoDown = false

var labelCVECntData *widget.Label
var btnFilterCmd *widget.Button
var btnFilterBgLayerGreen *canvas.Rectangle

var conjunctionImpact = "OR"

var CVEFilter fyne.App
var window fyne.Window

var bindingDataPoolGui model.BindingDataGui

// Initialization of the GUI
func InitGUI(actCVEFilter config.CVEFilter) {

	// init the binding data used by the GUI
	bindingDataPoolGui = config.InitBindDataGui()

	// hide the windows console window
	showWindowsConsole(false)

	// ---------------- App/window configuration ----------------
	// Initialize our new fyne interface application.
	CVEFilter = app.New()

	// set the theme for the app. Default is the custom dark theme
	CVEFilter.Settings().SetTheme(&customTheme{"Dark"})

	// set the logo of the application
	CVEFilter.SetIcon(img.Icon())

	// Initialize our new fyne interface application.
	window = CVEFilter.NewWindow(" " + config.Appname + " " + config.Version)

	// indicates that closing this main window should exit the app
	window.SetMaster()

	// center the windows on the screen
	window.CenterOnScreen()

	// do not allow to resize the window
	window.SetFixedSize(false)

	// Top area of border layout
	multiEntry := widget.NewMultiLineEntry()
	multiEntry.Wrapping = fyne.TextWrapWord
	// multiEntry.SetPlaceHolder("CVE-20XX-XXX,CVE-20XX-XXX, ... (blank characters and other symbols that do not fit are removed automatically at start)")
	multiEntry.SetText("CVE-2021-44228,CVE-2021-44230,CVE-2021-44231") // Remove after testing
	CVEInputForm := widget.NewFormItem("CVE(s) :", multiEntry)
	entryCont := widget.NewForm(CVEInputForm)
	btnGetInfoOnlineSlow := widget.NewButton("Slow Download", func() {})
	btnGetInfoOnlineFast := widget.NewButton("Fast Download (API key required)", func() {})

	// Since the button is transparent and cannot have any color, a color layer is integrated
	btnGetBgLayerSlow := canvas.NewRectangle(color.NRGBA{R: 255, G: 180, B: 0, A: 200})
	containerBtnGetSlow := container.NewStack(btnGetBgLayerSlow, btnGetInfoOnlineSlow)
	btnGetBgLayerFast := canvas.NewRectangle(color.NRGBA{R: 30, G: 120, B: 240, A: 200})
	containerBtnGetFast := container.NewStack(btnGetBgLayerFast, btnGetInfoOnlineFast)

	tableCVEHeadline := createCVETable(true) // do not use fyne's own header because I do not like it
	top := container.NewVBox(customSpacerSm, entryCont, customSpacerSm, customSpacerSm,
		container.NewHBox(layout.NewSpacer(), containerBtnGetSlow, customSpacerLg, containerBtnGetFast),
		customSpacerLg, tableCVEHeadline, widget.NewSeparator())

	// Center area of border layout
	tableCVEBody = createCVETable(false)
	center := tableCVEBody

	// Bottom area of border layout
	labelCVECntData = widget.NewLabel("")
	updateStaticsLabel(true) // init static values

	// Since the button is transparent and cannot have any color, a color layer is integrated
	btnFilerBgLayerRed := canvas.NewRectangle(color.NRGBA{R: 200, G: 0, B: 0, A: 200})
	btnFilterBgLayerGreen = canvas.NewRectangle(color.NRGBA{R: 0, G: 200, B: 0, A: 200})
	btnFilterCmd = widget.NewButton("Activate Filter", func() {})
	containerBtnFilter := container.NewStack(btnFilerBgLayerRed, btnFilterBgLayerGreen, btnFilterCmd)

	bottom := container.NewVBox(widget.NewSeparator(),
		container.NewHBox(labelCVECntData, layout.NewSpacer(), containerBtnFilter))

	// Button action for downloading mode (FAST)
	// Ask for API key for fast download if more than 1 CVE is required
	btnGetInfoOnlineFast.OnTapped = func() {
		if checkUserInput(multiEntry, window) {
			if len(model.ListOfCVEStrs) == 1 {
				prepDownload(false)
			} else {
				//Show popup and ask user for his API key
				apiKeyDialog := createUserApiDialog(window, bindingDataPoolGui.ApiKey)
				apiKeyDialog.Show()
			}
		}
	}

	// Button action for downloading mode (SLOW)
	btnGetInfoOnlineSlow.OnTapped = func() {
		if checkUserInput(multiEntry, window) {
			prepDownload(false)
		}
	}

	// Activate or deactivate the filter function
	btnFilterCmd.OnTapped = func() {
		if guiFilterActive {
			changeFilterMode(false)
			updateCVETable(tableCVEBody, model.ListOfCVEs)
			updateStaticsLabel(false)
		} else {
			if model.ListOfCVEs == nil {
				dialog.ShowInformation("", "No CVE available to filter.\nPlease download the CVE information first.", window)
				return
			}
			changeFilterMode(true)
			model.ListOfFilteredCVEs = service.FilterCVE(model.ListOfCVEs, actCVEFilter, conjunctionImpact)
			updateCVETable(tableCVEBody, model.ListOfFilteredCVEs)
			updateStaticsLabel(false)
		}
	}

	tableCVEHeadline.OnSelected = func(id widget.TableCellID) {
		tableHeadlineSelect(tableCVEHeadline, id)
	}

	tableCVEBody.OnSelected = func(id widget.TableCellID) {
		tableBodySelect(window, tableCVEBody, id)
	}

	// Defines the overall layout
	containerOverview := container.NewPadded(container.NewBorder(top, bottom, nil, nil, center))

	containerFilterScore := createFilterScoreContainer(actCVEFilter)
	containerCVSSv3FilterMetrics := createCVSSv3FilterContainer(actCVEFilter)
	containerCVSSv2FilterMetrics := createCVSSv2FilterContainer(actCVEFilter)
	containerNetwork := createNetworkContainer(bindingDataPoolGui)

	tabsFilter := container.NewAppTabs(
		container.NewTabItem("Base Score", containerFilterScore),
		container.NewTabItem("Metrics (CVSSv3)", containerCVSSv3FilterMetrics),
		container.NewTabItem("Metrics (CVSSv2)", containerCVSSv2FilterMetrics),
	)

	tabsGeneral := container.NewAppTabs(
		container.NewTabItem("Overview", containerOverview),
		container.NewTabItem("Filters", tabsFilter),
		container.NewTabItem("Network", containerNetwork),
	)
	window.SetContent(tabsGeneral)

	// ---------------- Menu ----------------
	// define and add the menu to the window
	mainMenu := createMenu(actCVEFilter, window)
	window.SetMainMenu(mainMenu)

	// Resize only in width due the menu width and take the actual height of the window
	window.Resize(fyne.NewSize(window.Content().Size().Width+screenWidthExt, window.Canvas().Size().Height+menuHeight))

	// Show all of our set content and run the gui.
	log.Println("GUI is ready and running.")
	window.ShowAndRun()
}

func checkUserInput(userInput *widget.Entry, window fyne.Window) bool {
	if userInput.Text == "" {
		dialog.ShowInformation("", "Please enter one or more CVE number(s) in the input field.", window)
		return false
	}

	// Remove any character other than a lowercase and uppercase character of "cCvVeE", a number, a comma and a hyphen
	log.Println("Removing possible special characters from the GUI input for fewer errors during parsing processing.")
	trimmedInput := regexp.MustCompile(`[^cveCVE0-9,-]+`).ReplaceAllString(userInput.Text, "")
	userInput.SetText(trimmedInput)

	resultParse, listOfCVEStrs := service.ParseGuiInput(userInput.Text)
	if !resultParse {
		dialog.ShowInformation("", "The input does not match to the CVE format.\n See log for more details.", window)
		return false
	}

	model.ListOfCVEStrs = listOfCVEStrs

	return true
}

func prepDownload(fastDL bool) {
	// Check if the users network configutation input is valid (only for slow downloads and if it is more than one CVE)
	if len(model.ListOfCVEStrs) > 1 {
		downloadDelaySlow, errSlow := bindingDataPoolGui.DownloadDelaySlow.Get()
		downloadDelayFast, errFast := bindingDataPoolGui.DownloadDelayFast.Get()
		downloadNetTimeout, errNetTieout := bindingDataPoolGui.NetworkTimeout.Get()
		if errSlow != nil || errFast != nil || errNetTieout != nil ||
			!service.CheckUserDelayNum(downloadDelaySlow) || !service.CheckUserDelayNum(downloadDelayFast) || !service.CheckUserDelayNum(downloadNetTimeout) {
			customDialog := createWarnDialog(window, "Wrong network configutation input value(s).\nPlease enter a valid number!")
			customDialog.Show()
			return
		}
	}

	// Variable to check if the download is finished, otherwise it is not clear if the user has finished the job or the window has been hidden
	var downlaodComplete bool
	stopProgressDialog := make(chan bool)
	customDialog, progressInfo := createProgressInfo(bindingDataPoolGui, fastDL, window)
	customDialog.SetOnClosed(func() {
		if !downlaodComplete {
			stopProgressDialog <- true
			close(stopProgressDialog)
		}
	})
	customDialog.Show()

	go func() {
		err, listOfCVEsTmp, cveProblemList := service.DlCVEDetails(bindingDataPoolGui, fastDL, progressInfo, stopProgressDialog)
		downlaodComplete = true
		customDialog.Hide()

		if err != nil {
			customDialog := createInfoDialog(window, "ERROR", "A problem occured while download the CVE information:\n\n"+err.Error())
			customDialog.Show()
		}

		if cveProblemList != nil {
			notFoundOnNVDDialog := createNotFoundOnNVDDialog(window, cveProblemList)
			notFoundOnNVDDialog.Show()
		}

		if listOfCVEsTmp != nil {
			model.ListOfCVEs = listOfCVEsTmp
			updateCVETable(tableCVEBody, model.ListOfCVEs)
			updateStaticsLabel(false)
		}
	}()
}

func updateStaticsLabel(init bool) {
	CVECntDataStr := "0"
	CVECntDataCVSSv2Str := "0"
	CVECntDataCVSSv3Str := "0"
	CVECntFiltDataStr := "0"
	CVECntFiltDataCVSSv2Str := "0"
	CVECntFiltDataCVSSv3Str := "0"
	text := ""

	if !init {
		CVECntData := len(model.ListOfCVEs)
		CVECntDataStr = strconv.Itoa(CVECntData)
		CVECntDataCVSSv2 := model.CountCVSSv2()
		CVECntDataCVSSv2Str = strconv.Itoa(CVECntDataCVSSv2)
		CVECntDataCVSSv3Str = strconv.Itoa(CVECntData - CVECntDataCVSSv2)

		CVECntFiltData := len(model.ListOfFilteredCVEs)
		CVECntFiltDataStr = strconv.Itoa(CVECntFiltData)
		CVECntFiltDataCVSSv2 := model.CountFiltCVSSv2()
		CVECntFiltDataCVSSv2Str = strconv.Itoa(CVECntFiltDataCVSSv2)
		CVECntFiltDataCVSSv3Str = strconv.Itoa(CVECntFiltData - CVECntFiltDataCVSSv2)
	}

	if !guiFilterActive {
		text = "Total:  " + CVECntDataStr + "   [ CVSSv3:  " + CVECntDataCVSSv3Str + ",  CVSSv2:  " + CVECntDataCVSSv2Str + " ]"
	} else {
		text = "Total:  " + CVECntDataStr + "   [ CVSSv3:  " + CVECntDataCVSSv3Str + ",  CVSSv2:  " + CVECntDataCVSSv2Str + " ]         |         Filtered: " +
			CVECntFiltDataStr + "   [ CVSSv3:  " + CVECntFiltDataCVSSv3Str + ",  CVSSv2:  " + CVECntFiltDataCVSSv2Str + " ]"
	}

	labelCVECntData.SetText(text)
}

// Set the state of the CVE filter: true = active, false = deactive
func changeFilterMode(filterAct bool) {
	if filterAct {
		guiFilterActive = true
		btnFilterBgLayerGreen.Hide()
		btnFilterCmd.SetText("Deactivate Filter")
	} else {
		guiFilterActive = false
		btnFilterBgLayerGreen.Show()
		btnFilterCmd.SetText("Activate Filter")
	}
}

// https://stackoverflow.com/questions/23743217/printing-output-to-a-command-window-when-golang-application-is-compiled-with-ld/23744350
// https://forum.golangbridge.org/t/no-println-output-with-go-build-ldflags-h-windowsgui/7633/6
// this functions open the windows standard console window
func showWindowsConsole(show bool) {
	getConsoleWindow := syscall.NewLazyDLL("kernel32.dll").NewProc("GetConsoleWindow")
	if getConsoleWindow.Find() != nil {
		return
	}

	showWindow := syscall.NewLazyDLL("user32.dll").NewProc("ShowWindow")
	if showWindow.Find() != nil {
		return
	}

	hwnd, _, _ := getConsoleWindow.Call()
	if hwnd == 0 {
		return
	}

	if show {
		showWindow.Call(hwnd, syscall.SW_RESTORE)
		log.Println("Windows console window is displayed")
	} else {
		showWindow.Call(hwnd, syscall.SW_HIDE)
		log.Println("Windows console window is hided")
	}
}
