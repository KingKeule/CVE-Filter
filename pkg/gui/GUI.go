package gui

import (
	"fmt"
	"log"
	"os/exec"
	"reflect"
	"strconv"
	"syscall"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"

	"github.com/KingKeule/CVE-Filter/pkg/config"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

var screenWidth float32 = 800
var menuHeight float32 = 26

const numCols = 10

var tableHeadline = []string{"CVE ID", "Score", "AV", "AC", "PR", "UI", "S", "C", "I", "A"}

const appname = "CVE-Filter"
const version = "v0.1"
const gitHubLink = "https://github.com/KingKeule/CVE-Filter"

//Initialization of the GUI
func InitGUI() {

	// hide the windows console window
	showWindowsConsole(false)

	// ---------------- App/window configuration ----------------
	// Initialize our new fyne interface application.
	app := app.New()

	// set the theme for the app. Default is dark theme
	app.Settings().SetTheme(theme.DarkTheme())

	// Initialize our new fyne interface application.
	window := app.NewWindow(" " + appname + " " + version)

	// indicates that closing this main window should exit the app
	window.SetMaster()

	// center the windows on the screen
	window.CenterOnScreen()

	// do not allow to resize the window
	window.SetFixedSize(false)

	actCVEFilter := config.InitCVEFilter()

	// Top area of border layout
	multiEntry := widget.NewMultiLineEntry()
	multiEntry.Wrapping = fyne.TextWrapWord
	multiEntry.SetPlaceHolder("CVE-20XX-XXX,CVE-20XX-XXX, ...")
	multiEntry.SetText("CVE-2021-44228,CVE-2021-44230,CVE-2021-44231") // Remove after testing
	CVEInputForm := widget.NewFormItem("CVE(s):", multiEntry)
	entryCont := widget.NewForm(CVEInputForm)

	btnGetInfoOnline := widget.NewButton("Download CVE details from NVD", func() {})
	contBtnGetInfo := container.NewHBox(layout.NewSpacer(), btnGetInfoOnline)

	top := container.NewVBox(entryCont, contBtnGetInfo)

	// Center area of border layout
	tableCVE := createCVETable()
	center := tableCVE

	// Bottom area of border layout
	labelCVECnt := widget.NewLabelWithStyle("Total:", fyne.TextAlignTrailing, fyne.TextStyle{Bold: false})
	labelCVECntData := widget.NewLabelWithStyle("-", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	btnFilterCmd := widget.NewButton("Activate Filter", func() {})
	bottom := container.NewHBox(labelCVECnt, labelCVECntData, layout.NewSpacer(), btnFilterCmd)

	// Starting the process of downloading and displaying the CVE information
	btnGetInfoOnline.OnTapped = func() {
		resultA, listOfCVEStrs := service.ParseGuiInput(multiEntry.Text)
		if !resultA {
			dialog.ShowInformation("", "The input does not match to the CVE format.\n See log for more details.", window)
		} else {
			resultB, listOfCVEs := service.DlCVEDetails(listOfCVEStrs)
			if !resultB {
				dialog.ShowInformation("", "A problem occured while download the CVE information.\n See log for more details.", window)
			} else {
				updateCVETable(tableCVE, listOfCVEs)
				labelCVECntData.SetText(strconv.Itoa(len(listOfCVEs)))
			}
		}
	}

	// Defines the overall layout
	containerOverview := container.NewPadded(container.New(layout.NewBorderLayout(top, bottom, nil, nil), top, center, bottom))
	containerFilter := createFilterContainer(actCVEFilter, window)

	tabs := container.NewAppTabs(
		container.NewTabItem("Overview", containerOverview),
		container.NewTabItem("Filter criteria", containerFilter),
	)
	window.SetContent(tabs)

	// ---------------- Menu ----------------
	// define and add the menu to the window
	window.SetMainMenu(fyne.NewMainMenu(
		fyne.NewMenu("Tool",
			fyne.NewMenuItem("Save filter", func() {
				error := config.WriteCVEFilterToFile(actCVEFilter)
				if error {
					dialog.ShowInformation("", "Error while saving.\n See log for more details.", window)
				} else {
					dialog.ShowInformation("", "Configuration file \"+config.ConfigFileName+\"\n was saved successfully.", window)
				}
			}),
			fyne.NewMenuItem("Reset filter", func() {
				config.ResetCVEFilter(actCVEFilter)
			})),
		fyne.NewMenu("Help",
			fyne.NewMenuItem("Show Log", func() {
				showWindowsConsole(true)
			}),
			fyne.NewMenuItem("About", func() {
				// windows command to open the browser with the given link
				exec.Command("rundll32", "url.dll,FileProtocolHandler", gitHubLink).Start()
				log.Println("Open github site from the project")
			}),
		)))

	// Resize only in width due the menu width and take the actual height of the window
	window.Resize(fyne.NewSize(screenWidth, window.Canvas().Size().Height + +menuHeight))

	// Show all of our set content and run the gui.
	window.ShowAndRun()
}

func createFilterContainer(actCVEFilter config.CVEFilter, _ fyne.Window) fyne.CanvasObject {

	// ---------------- Attack Vector (AV) ----------------
	widgetAV := widget.NewLabelWithStyle("Attack Vector (AV)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAVN := widget.NewCheckWithData("Network (N)", actCVEFilter.BindingData.FilterAVN)
	checkAVA := widget.NewCheckWithData("Adjacent (A)", actCVEFilter.BindingData.FilterAVA)
	checkAVL := widget.NewCheckWithData("Local(L)", actCVEFilter.BindingData.FilterAVL)
	checkAVP := widget.NewCheckWithData("Physical(P)", actCVEFilter.BindingData.FilterAVP)

	containerAV := container.NewVBox(widgetAV,
		container.NewHBox(checkAVN, checkAVA, checkAVL, checkAVP))

	// ---------------- Attack Complexity (AC) ----------------
	widgetAC := widget.NewLabelWithStyle("Attack Complexity (AC)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkACL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterACL)
	checkACH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterACH)

	containerAC := container.NewVBox(widgetAC,
		container.NewHBox(checkACL, checkACH))

	// ---------------- Privileges Required (PR) ----------------
	widgetPR := widget.NewLabelWithStyle("Privileges Required (PR)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkPRN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterPRN)
	checkPRL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterPRL)
	checkPRH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterPRH)

	containerPR := container.NewVBox(widgetPR,
		container.NewHBox(checkPRN, checkPRL, checkPRH))

	// ---------------- User Interaction (UI) ----------------
	widgetUI := widget.NewLabelWithStyle("User Interaction (UI)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkUIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterUIN)
	checkUIR := widget.NewCheckWithData("Required (R)", actCVEFilter.BindingData.FilterUIR)

	containerUI := container.NewVBox(widgetUI,
		container.NewHBox(checkUIN, checkUIR))

	// ---------------- Scope (S) ----------------
	widgetS := widget.NewLabelWithStyle("Scope (S)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkSU := widget.NewCheckWithData("Unchanged (U)", actCVEFilter.BindingData.FilterSU)
	checkSC := widget.NewCheckWithData("Changed (C)", actCVEFilter.BindingData.FilterSC)

	containerS := container.NewVBox(widgetS,
		container.NewHBox(checkSU, checkSC))

	// ---------------- Confidentiality (C) ----------------
	widgetC := widget.NewLabelWithStyle("Confidentiality (C)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkCN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCN)
	checkCL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCL)
	checkCH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCH)

	containerC := container.NewVBox(widgetC,
		container.NewHBox(checkCN, checkCL, checkCH))

	// ---------------- Integrity (I) ----------------
	widgetI := widget.NewLabelWithStyle("Integrity (I)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterIN)
	checkIL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterIL)
	checkIH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterIH)

	containerI := container.NewVBox(widgetI,
		container.NewHBox(checkIN, checkIL, checkIH))

	// ---------------- Availability (A) ----------------
	widgetA := widget.NewLabelWithStyle("Availability (A)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterAN)
	checkAL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterAL)
	checkAH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterAH)

	containerA := container.NewVBox(widgetA,
		container.NewHBox(checkAN, checkAL, checkAH))

	// ---------------- Container complete ----------------
	return container.NewVBox(containerAV, containerAC, containerPR, containerUI, containerS, widget.NewSeparator(), containerC, containerI, containerA)
}

// Create an empty table for CVE overview. Only the headline is set.
func createCVETable() *widget.Table {
	numRows := 2 // one row does not look pretty

	table := widget.NewTable(
		// set the size of the table
		func() (int, int) { return numRows, numCols },
		// define the type of the cell
		func() fyne.CanvasObject {
			return widget.NewLabelWithStyle("", fyne.TextAlignLeading, fyne.TextStyle{Bold: false})
		},
		// define the update mechanism of all cells
		func(id widget.TableCellID, cell fyne.CanvasObject) {
			switch id.Row {
			case 0:
				cell.(*widget.Label).TextStyle = fyne.TextStyle{Bold: true}
				cell.(*widget.Label).SetText(tableHeadline[id.Col])
			}
		})

	// set the table column width for each CVE metric
	table.SetColumnWidth(0, 130) // CVE Id
	table.SetColumnWidth(1, 60)  // Score
	table.SetColumnWidth(2, 90)  // AV
	table.SetColumnWidth(3, 50)  // AC
	table.SetColumnWidth(4, 60)  // PR
	table.SetColumnWidth(5, 80)  // UI
	table.SetColumnWidth(6, 110) // S
	table.SetColumnWidth(7, 60)  // C
	table.SetColumnWidth(8, 60)  // I
	table.SetColumnWidth(9, 60)  // A

	return table
}

func updateCVETable(tableCVE *widget.Table, listOfCVEs []service.CVE) {

	var tableData = [][]string{tableHeadline}

	for _, cve := range listOfCVEs {
		tmpArray := convCVEStruct(cve)
		tableData = append(tableData, tmpArray)
	}

	numRows := len(tableData)
	tableCVE.Length = func() (int, int) {
		return numRows, numCols
	}

	tableCVE.UpdateCell = func(id widget.TableCellID, template fyne.CanvasObject) {
		cellLabel := template.(*widget.Label)
		cellLabel.SetText(tableData[id.Row][id.Col])
	}

	// Necessary because otherwise the update of the cells is not displayed.
	tableCVE.Refresh()
}

func convCVEStruct(data interface{}) []string {
	v := reflect.ValueOf(data)
	n := v.NumField()
	rowContents := make([]string, n)
	for i := 0; i < n; i++ {
		x := v.Field(i)
		s := fmt.Sprintf("%v", x.Interface())
		rowContents[i] = s
	}
	return rowContents
}

// https://stackoverflow.com/questions/23743217/printing-output-to-a-command-window-when-golang-application-is-compiled-with-ld/23744350
// https://forum.golangbridge.org/t/no-println-output-with-go-build-ldflags-h-windowsgui/7633/6
// this functions open the windows standard console window
func showWindowsConsole(show bool) {
	getConsoleWindow := syscall.NewLazyDLL("kernel32.dll").NewProc("GetConsoleWindow")
	if getConsoleWindow.Find() != nil {
		return
	}

	showWindow := syscall.NewLazyDLL("user32.dll").NewProc("ShowWindow")
	if showWindow.Find() != nil {
		return
	}

	hwnd, _, _ := getConsoleWindow.Call()
	if hwnd == 0 {
		return
	}

	if show {
		showWindow.Call(hwnd, syscall.SW_RESTORE)
		log.Println("Windows console window is displayed")
	} else {
		showWindow.Call(hwnd, syscall.SW_HIDE)
		log.Println("Windows console window is hided")
	}
}
