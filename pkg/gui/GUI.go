package gui

import (
	"image/color"
	"log"
	"strconv"
	"strings"
	"syscall"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"

	"github.com/KingKeule/CVE-Filter/pkg/config"
	"github.com/KingKeule/CVE-Filter/pkg/gui/img"
	"github.com/KingKeule/CVE-Filter/pkg/model"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

var screenWidth float32 = 800
var menuHeight float32 = 26

var guiFilterActive = false
var scoreSortedHightoDown = false

var CVEFilter fyne.App

const appname = "CVE-Filter"
const version = "v0.5"
const gitHubLink = "https://github.com/KingKeule/CVE-Filter"
const cvssLink = "https://www.first.org/cvss/"

//Initialization of the GUI
func InitGUI(actCVEFilter config.CVEFilter) {

	// hide the windows console window
	showWindowsConsole(false)

	// ---------------- App/window configuration ----------------
	// Initialize our new fyne interface application.
	CVEFilter = app.New()

	// set the theme for the app. Default is dark theme
	CVEFilter.Settings().SetTheme(theme.DarkTheme())

	// set the logo of the application
	CVEFilter.SetIcon(img.Icon())

	// Initialize our new fyne interface application.
	window := CVEFilter.NewWindow(" " + appname + " " + version)

	// indicates that closing this main window should exit the app
	window.SetMaster()

	// center the windows on the screen
	window.CenterOnScreen()

	// do not allow to resize the window
	window.SetFixedSize(false)

	// Top area of border layout
	multiEntry := widget.NewMultiLineEntry()
	multiEntry.Wrapping = fyne.TextWrapWord
	multiEntry.SetPlaceHolder("CVE-20XX-XXX,CVE-20XX-XXX, ...")
	multiEntry.SetText("CVE-2021-44228,CVE-2021-44230,CVE-2021-44231") // Remove after testing
	CVEInputForm := widget.NewFormItem("CVE(s):", multiEntry)
	entryCont := widget.NewForm(CVEInputForm)
	btnGetInfoOnline := widget.NewButton("Download CVE details from NVD", func() {})

	// Since the button is transparent and cannot have any color, a color layer is integrated
	btnGetBgLayer := canvas.NewRectangle(color.NRGBA{R: 255, G: 180, B: 0, A: 200})
	containerBtnGet := container.NewMax(container.New(layout.NewPaddedLayout(), btnGetBgLayer), btnGetInfoOnline)

	// Set size and position of objects
	entryCont.Move(fyne.NewPos(0, 10))
	entryCont.Resize(fyne.NewSize(screenWidth-20, entryCont.MinSize().Height))
	containerBtnGet.Move(fyne.NewPos(500, 100))

	tableCVEHeadline := createCVETable(true)
	top := container.NewVBox(container.NewWithoutLayout(entryCont, containerBtnGet), widget.NewLabel(""), widget.NewLabel(""), tableCVEHeadline, widget.NewSeparator())
	//top := container.NewVBox(entryCont, container.NewHBox(layout.NewSpacer(), btnGetInfoOnline))

	// Center area of border layout
	tableCVEBody = createCVETable(false)
	center := tableCVEBody

	// Bottom area of border layout
	labelCVECnt := widget.NewLabelWithStyle("Total:", fyne.TextAlignTrailing, fyne.TextStyle{Bold: false})
	labelCVECntData := widget.NewLabelWithStyle("-", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	labelCVEFiltCnt := widget.NewLabelWithStyle("|    Filtered:", fyne.TextAlignTrailing, fyne.TextStyle{Bold: false})
	labelCVEFiltCntData := widget.NewLabelWithStyle("-", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	// Since the button is transparent and cannot have any color, a color layer is integrated
	btnFilerBgLayerRed := canvas.NewRectangle(color.NRGBA{R: 200, G: 0, B: 0, A: 200})
	btnFilterBgLayerGreen := canvas.NewRectangle(color.NRGBA{R: 0, G: 200, B: 0, A: 200})

	btnFilterCmd := widget.NewButton("Activate Filter", func() {})
	containerBtnFilter := container.NewMax(container.New(layout.NewPaddedLayout(), btnFilerBgLayerRed, btnFilterBgLayerGreen), btnFilterCmd)

	bottom := container.NewVBox(widget.NewSeparator(), container.NewHBox(labelCVECnt, labelCVECntData, labelCVEFiltCnt, labelCVEFiltCntData, layout.NewSpacer(), containerBtnFilter))

	// Starting the process of downloading and displaying the CVE information
	btnGetInfoOnline.OnTapped = func() {
		if multiEntry.Text == "" {
			dialog.ShowInformation("", "Please enter one or more CVE number(s) in the input field.", window)
			return
		}

		log.Println("Removing possible spaces from the GUI input for fewer errors during parsing processing.")
		trimmedInput := strings.ReplaceAll(multiEntry.Text, " ", "")
		multiEntry.SetText(trimmedInput)

		resultParse, listOfCVEStrs := service.ParseGuiInput(multiEntry.Text)
		if !resultParse {
			dialog.ShowInformation("", "The input does not match to the CVE format.\n See log for more details.", window)
			return
		}

		if len(listOfCVEStrs) > 100 {
			dialog.ShowInformation("", "Too much CVEs for one request.", window)
			return
		}

		// Variable to check if the download is finished, otherwise it is not clear if the user has finished the job or the window has been hidden
		var downlaodComplete bool
		stopProgressDialog := make(chan bool)
		customDialog, progressInfo := createProgressInfo(window)
		customDialog.SetOnClosed(func() {
			if !downlaodComplete {
				stopProgressDialog <- true
				close(stopProgressDialog)
			}
		})
		customDialog.Show()

		go func() {
			err, listOfCVEsTmp, notFoundOnNVD := service.DlCVEDetails(listOfCVEStrs, progressInfo, stopProgressDialog)
			downlaodComplete = true
			customDialog.Hide()

			if err != nil {
				dialog.ShowInformation("", "A problem occured while download the CVE information.\n"+err.Error(), window)
			}

			if notFoundOnNVD != nil {
				if len(notFoundOnNVD) > 6 {
					notFoundOnNVDShort := strings.Join(notFoundOnNVD[0:6], ",")
					dialog.ShowInformation("", "A problem occured while download the CVE information.\n"+
						"Following CVE(s) CVE could not be found at NVD:\n"+notFoundOnNVDShort+", ...", window)
				} else {
					notFoundOnNVD := strings.Join(notFoundOnNVD, ",")
					dialog.ShowInformation("", "A problem occured while download the CVE information.\n"+
						"Following CVE(s) CVE could not be found at NVD:\n"+notFoundOnNVD, window)
				}
			}

			if listOfCVEsTmp != nil {
				model.ListOfCVEs = listOfCVEsTmp
				updateCVETable(tableCVEBody, model.ListOfCVEs)
				labelCVECntData.SetText(strconv.Itoa(len(model.ListOfCVEs)))
			}
		}()
	}

	// Activate or deactivate the filter function
	btnFilterCmd.OnTapped = func() {
		if guiFilterActive {
			guiFilterActive = false
			btnFilterBgLayerGreen.Show()
			updateCVETable(tableCVEBody, model.ListOfCVEs)
			labelCVEFiltCntData.SetText("-")
			btnFilterCmd.SetText("Activate Filter")
		} else {
			if model.ListOfCVEs == nil {
				dialog.ShowInformation("", "No CVE available to filter.\nPlease download the CVE information first.", window)
				return
			}
			guiFilterActive = true
			btnFilterBgLayerGreen.Hide()
			model.ListOfFilteredCVEs = service.FilterCVE(model.ListOfCVEs, actCVEFilter)
			updateCVETable(tableCVEBody, model.ListOfFilteredCVEs)
			labelCVEFiltCntData.SetText(strconv.Itoa(len(model.ListOfFilteredCVEs)))
			btnFilterCmd.SetText("Deactivate Filter")
		}
	}

	tableCVEHeadline.OnSelected = func(id widget.TableCellID) {
		tableHeadlineSelect(window, tableCVEHeadline, id)
	}

	tableCVEBody.OnSelected = func(id widget.TableCellID) {
		tableBodySelect(window, tableCVEBody, id)
	}

	// Defines the overall layout
	containerOverview := container.NewPadded(container.NewBorder(top, bottom, nil, nil, center))

	containerFilterScore := createFilterScoreContainer(actCVEFilter)
	containerFilterMetrics := createFilterMetricsContainer(actCVEFilter)

	tabs := container.NewAppTabs(
		container.NewTabItem("Overview", containerOverview),
		container.NewTabItem("Filter (Score)", containerFilterScore),
		container.NewTabItem("Filter (Metrics)", containerFilterMetrics),
	)
	window.SetContent(tabs)

	// ---------------- Menu ----------------
	// define and add the menu to the window
	mainMenu := createMenu(actCVEFilter, window)
	window.SetMainMenu(mainMenu)

	// Resize only in width due the menu width and take the actual height of the window
	window.Resize(fyne.NewSize(screenWidth, window.Canvas().Size().Height+menuHeight))

	// Show all of our set content and run the gui.
	log.Println("GUI is ready and running.")
	window.ShowAndRun()
}

// https://stackoverflow.com/questions/23743217/printing-output-to-a-command-window-when-golang-application-is-compiled-with-ld/23744350
// https://forum.golangbridge.org/t/no-println-output-with-go-build-ldflags-h-windowsgui/7633/6
// this functions open the windows standard console window
func showWindowsConsole(show bool) {
	getConsoleWindow := syscall.NewLazyDLL("kernel32.dll").NewProc("GetConsoleWindow")
	if getConsoleWindow.Find() != nil {
		return
	}

	showWindow := syscall.NewLazyDLL("user32.dll").NewProc("ShowWindow")
	if showWindow.Find() != nil {
		return
	}

	hwnd, _, _ := getConsoleWindow.Call()
	if hwnd == 0 {
		return
	}

	if show {
		showWindow.Call(hwnd, syscall.SW_RESTORE)
		log.Println("Windows console window is displayed")
	} else {
		showWindow.Call(hwnd, syscall.SW_HIDE)
		log.Println("Windows console window is hided")
	}
}
