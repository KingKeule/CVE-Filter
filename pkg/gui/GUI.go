package gui

import (
	"image/color"
	"log"
	"os"
	"strconv"
	"strings"
	"syscall"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/canvas"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"

	"github.com/KingKeule/CVE-Filter/pkg/config"
	"github.com/KingKeule/CVE-Filter/pkg/model"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

var screenWidth float32 = 800
var menuHeight float32 = 26

const numCols = 10

var tableHeadlineShort = []string{"CVE ID", "Score", "AV", "AC", "PR", "UI", "S", "C", "I", "A"}
var tableHeadlineLong = []string{"CVE ID", "Base Score", "Attack Vector", "Attack Complexity", "Privileges Required", "User interaction", "Scope", "Confidentiality", "Integrity", "Availability"}

var listOfCVEs []model.CVE
var listOfFilteredCVEs []model.CVE

var guiFilterActive = false
var scoreSortedHightoDown = false

const appname = "CVE-Filter"
const version = "v0.4"
const gitHubLink = "https://github.com/KingKeule/CVE-Filter"

//Initialization of the GUI
func InitGUI() {

	// hide the windows console window
	showWindowsConsole(false)

	// ---------------- App/window configuration ----------------
	// Initialize our new fyne interface application.
	app := app.New()

	// set the theme for the app. Default is dark theme
	app.Settings().SetTheme(theme.DarkTheme())

	// Initialize our new fyne interface application.
	window := app.NewWindow(" " + appname + " " + version)

	// indicates that closing this main window should exit the app
	window.SetMaster()

	// center the windows on the screen
	window.CenterOnScreen()

	// do not allow to resize the window
	window.SetFixedSize(false)

	actCVEFilter := config.InitCVEFilter()

	// Top area of border layout
	multiEntry := widget.NewMultiLineEntry()
	multiEntry.Wrapping = fyne.TextWrapWord
	multiEntry.SetPlaceHolder("CVE-20XX-XXX,CVE-20XX-XXX, ...")
	multiEntry.SetText("CVE-2021-44228,CVE-2021-44230,CVE-2021-44231") // Remove after testing
	CVEInputForm := widget.NewFormItem("CVE(s):", multiEntry)
	entryCont := widget.NewForm(CVEInputForm)
	btnGetInfoOnline := widget.NewButton("Download CVE details from NVD", func() {})

	// since the button is transparent and cannot have any color, a color layer is integrated
	btnGetBgLayer := canvas.NewRectangle(color.NRGBA{R: 255, G: 180, B: 0, A: 200})
	containerBtnGet := container.NewMax(container.New(layout.NewPaddedLayout(), btnGetBgLayer), btnGetInfoOnline)

	// Set size and position of objects
	entryCont.Move(fyne.NewPos(0, 10))
	entryCont.Resize(fyne.NewSize(screenWidth-20, entryCont.MinSize().Height))
	containerBtnGet.Move(fyne.NewPos(500, 100))

	tableCVEHeadline := createCVETable(true, numCols)
	top := container.NewVBox(container.NewWithoutLayout(entryCont, containerBtnGet), widget.NewLabel(""), widget.NewLabel(""), tableCVEHeadline, widget.NewSeparator())
	//top := container.NewVBox(entryCont, container.NewHBox(layout.NewSpacer(), btnGetInfoOnline))

	// Center area of border layout
	tableCVEBody := createCVETable(false, numCols)
	center := tableCVEBody

	// Bottom area of border layout
	labelCVECnt := widget.NewLabelWithStyle("Total:", fyne.TextAlignTrailing, fyne.TextStyle{Bold: false})
	labelCVECntData := widget.NewLabelWithStyle("-", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	labelCVEFiltCnt := widget.NewLabelWithStyle("|    Filtered:", fyne.TextAlignTrailing, fyne.TextStyle{Bold: false})
	labelCVEFiltCntData := widget.NewLabelWithStyle("-", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	// since the button is transparent and cannot have any color, a color layer is integrated
	btnFilerBgLayerRed := canvas.NewRectangle(color.NRGBA{R: 200, G: 0, B: 0, A: 200})
	btnFilterBgLayerGreen := canvas.NewRectangle(color.NRGBA{R: 0, G: 200, B: 0, A: 200})

	btnFilterCmd := widget.NewButton("Activate Filter", func() {})
	containerBtnFilter := container.NewMax(container.New(layout.NewPaddedLayout(), btnFilerBgLayerRed, btnFilterBgLayerGreen), btnFilterCmd)

	bottom := container.NewVBox(widget.NewSeparator(), container.NewHBox(labelCVECnt, labelCVECntData, labelCVEFiltCnt, labelCVEFiltCntData, layout.NewSpacer(), containerBtnFilter))

	// Starting the process of downloading and displaying the CVE information
	btnGetInfoOnline.OnTapped = func() {
		if multiEntry.Text == "" {
			dialog.ShowInformation("", "Please enter one or more CVE number(s) in the input field.", window)
			return
		}

		log.Println("Removing possible spaces from the GUI input for fewer errors during parsing processing.")
		trimmedInput := strings.ReplaceAll(multiEntry.Text, " ", "")
		multiEntry.SetText(trimmedInput)

		resultParse, listOfCVEStrs := service.ParseGuiInput(multiEntry.Text)
		if !resultParse {
			dialog.ShowInformation("", "The input does not match to the CVE format.\n See log for more details.", window)
			return
		}

		if len(listOfCVEStrs) > 100 {
			dialog.ShowInformation("", "Too much CVEs for one request.", window)
			return
		}

		dialogInf := dialog.NewProgressInfinite("", "Downloading CVE infomation.\nThis could take a while.", window)
		dialogInf.Show()
		err, listOfCVEsTmp, notFoundOnNVD := service.DlCVEDetails(listOfCVEStrs)
		dialogInf.Hide()
		if err != nil {
			dialog.ShowInformation("", "A problem occured while download the CVE information.\n"+err.Error(), window)
		}

		if notFoundOnNVD != nil {
			if len(notFoundOnNVD) > 6 {
				notFoundOnNVDShort := strings.Join(notFoundOnNVD[0:6], ",")
				dialog.ShowInformation("", "A problem occured while download the CVE information.\n"+
					"Following CVE(s) CVE could not be found at NVD:\n"+notFoundOnNVDShort+", ...", window)
			} else {
				notFoundOnNVD := strings.Join(notFoundOnNVD, ",")
				dialog.ShowInformation("", "A problem occured while download the CVE information.\n"+
					"Following CVE(s) CVE could not be found at NVD:\n"+notFoundOnNVD, window)
			}
		}

		if listOfCVEsTmp != nil {
			listOfCVEs = listOfCVEsTmp
			updateCVETable(tableCVEBody, listOfCVEs, numCols)
			labelCVECntData.SetText(strconv.Itoa(len(listOfCVEs)))
		}
	}

	// Activate or deactivate the filter function
	btnFilterCmd.OnTapped = func() {
		if guiFilterActive {
			guiFilterActive = false
			btnFilterBgLayerGreen.Show()
			updateCVETable(tableCVEBody, listOfCVEs, numCols)
			labelCVEFiltCntData.SetText("-")
			btnFilterCmd.SetText("Activate Filter")
		} else {
			guiFilterActive = true
			btnFilterBgLayerGreen.Hide()
			listOfFilteredCVEs = service.FilterCVE(listOfCVEs, actCVEFilter)
			updateCVETable(tableCVEBody, listOfFilteredCVEs, numCols)
			labelCVEFiltCntData.SetText(strconv.Itoa(len(listOfFilteredCVEs)))
			btnFilterCmd.SetText("Deactivate Filter")
		}
	}

	tableCVEHeadline.OnSelected = func(id widget.TableCellID) {
		if id.Col == 1 && id.Row == 0 {
			tableCVEHeadline.Unselect(id)
			if !scoreSortedHightoDown {
				if guiFilterActive {
					sortedCVE := model.SortBaseScore(listOfFilteredCVEs, true)
					updateCVETable(tableCVEBody, sortedCVE, numCols)
				} else {
					sortedCVE := model.SortBaseScore(listOfCVEs, true)
					updateCVETable(tableCVEBody, sortedCVE, numCols)
				}
				scoreSortedHightoDown = true
			} else {
				if guiFilterActive {
					sortedCVE := model.SortBaseScore(listOfFilteredCVEs, false)
					updateCVETable(tableCVEBody, sortedCVE, numCols)
				} else {
					sortedCVE := model.SortBaseScore(listOfCVEs, false)
					updateCVETable(tableCVEBody, sortedCVE, numCols)
				}
				scoreSortedHightoDown = false
			}
		}
	}

	// Defines the overall layout
	containerOverview := container.NewPadded(container.NewBorder(top, bottom, nil, nil, center))

	containerFilterScore := createFilterScoreContainer(actCVEFilter)
	containerFilterMetrics := createFilterMetricsContainer(actCVEFilter)

	tabs := container.NewAppTabs(
		container.NewTabItem("Overview", containerOverview),
		container.NewTabItem("Filter (Score)", containerFilterScore),
		container.NewTabItem("Filter (Metrics)", containerFilterMetrics),
	)
	window.SetContent(tabs)

	// ---------------- Menu ----------------
	// define and add the menu to the window
	mainMenu := createMenu(actCVEFilter, window)
	window.SetMainMenu(mainMenu)

	// Resize only in width due the menu width and take the actual height of the window
	window.Resize(fyne.NewSize(screenWidth, window.Canvas().Size().Height+menuHeight))

	// Show all of our set content and run the gui.
	log.Println("GUI is ready and running.")
	window.ShowAndRun()
}

// Create the container for filtering the CVSS Base Score
func createFilterScoreContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {
	// Filter by the Base Score category
	widScoreCat := widget.NewLabelWithStyle("Filter via category:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkScoreCatLow := widget.NewCheckWithData("Low (0.1 - 3.9)", actCVEFilter.BindingData.FilterBaseSeverityLow)
	checkScoreCatMed := widget.NewCheckWithData("Medium (4.0 - 6.9)", actCVEFilter.BindingData.FilterBaseSeverityMed)
	checkScoreCatHigh := widget.NewCheckWithData("High (7.0 - 8.9)", actCVEFilter.BindingData.FilterBaseSeverityHigh)
	checkScoreCatCrit := widget.NewCheckWithData("Critical (9.0 - 10.0)", actCVEFilter.BindingData.FilterBaseSeverityCrit)

	containerScoreCat := container.NewHBox(checkScoreCatLow, checkScoreCatMed, checkScoreCatHigh, checkScoreCatCrit)

	// Filter by a Base Score range
	scoreMin := actCVEFilter.BindingData.FilterBaseScoreMin
	scoreMax := actCVEFilter.BindingData.FilterBaseScoreMax

	widBaseScore := widget.NewLabelWithStyle("Filter via Base Score range:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetBaseScoreMin := widget.NewLabelWithStyle("Min. CVSS 3.1 Base Score:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetScoreValueMin := widget.NewLabelWithData(binding.FloatToStringWithFormat(scoreMin, "%0.1f"))
	widgetBaseScoreMax := widget.NewLabelWithStyle("Max. CVSS 3.1 Base Score:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetScoreValueMax := widget.NewLabelWithData(binding.FloatToStringWithFormat(scoreMax, "%0.1f"))

	sliderScoreMin := widget.NewSliderWithData(0, 10, scoreMin)
	sliderScoreMin.Step = 0.1
	sliderScoreMax := widget.NewSliderWithData(0, 10, scoreMax)
	sliderScoreMax.Step = 0.1

	containerScoreMin := container.NewVBox(container.NewHBox(widgetBaseScoreMin, widgetScoreValueMin), sliderScoreMin)
	containerScoreMax := container.NewVBox(container.NewHBox(widgetBaseScoreMax, widgetScoreValueMax), sliderScoreMax)
	containerScoreRange := container.NewVBox(widBaseScore, containerScoreMin, containerScoreMax)

	container := container.NewVBox(widScoreCat, containerScoreCat, widget.NewSeparator(), containerScoreRange)

	// Hide the range filter at startup if one of the base severity categories is checked in the configuration
	if checkScoreCatLow.Checked || checkScoreCatMed.Checked || checkScoreCatHigh.Checked || checkScoreCatCrit.Checked {
		containerScoreRange.Hide()
	}

	// Hide the range filter at runtime if one of the base severity categories is checked
	checkScoreCatLow.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityLow.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkScoreCatMed.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityMed.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkScoreCatHigh.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityHigh.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkScoreCatCrit.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityCrit.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}

	return container
}

func updateGuiScoreRange(actCVEFilter config.CVEFilter, containerScoreRange *fyne.Container, scoreMin binding.Float, scoreMax binding.Float) {
	checkMinValue, _ := actCVEFilter.BindingData.FilterBaseSeverityLow.Get()
	checkMedValue, _ := actCVEFilter.BindingData.FilterBaseSeverityMed.Get()
	checkHighValue, _ := actCVEFilter.BindingData.FilterBaseSeverityHigh.Get()
	checkCritValue, _ := actCVEFilter.BindingData.FilterBaseSeverityCrit.Get()

	if checkMinValue || checkMedValue || checkHighValue || checkCritValue {
		scoreMin.Set(0)
		scoreMax.Set(10)
		containerScoreRange.Hide()
	} else {
		containerScoreRange.Show()
	}
}

// Create the container for filtering the CVSS Metrics
func createFilterMetricsContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {

	// ---------------- Attack Vector (AV) ----------------
	widgetAV := widget.NewLabelWithStyle("Attack Vector (AV)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAVN := widget.NewCheckWithData("Network (N)", actCVEFilter.BindingData.FilterAVN)
	checkAVA := widget.NewCheckWithData("Adjacent (A)", actCVEFilter.BindingData.FilterAVA)
	checkAVL := widget.NewCheckWithData("Local(L)", actCVEFilter.BindingData.FilterAVL)
	checkAVP := widget.NewCheckWithData("Physical(P)", actCVEFilter.BindingData.FilterAVP)

	containerAV := container.NewVBox(widgetAV,
		container.NewHBox(checkAVN, checkAVA, checkAVL, checkAVP))

	// ---------------- Attack Complexity (AC) ----------------
	widgetAC := widget.NewLabelWithStyle("Attack Complexity (AC)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkACL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterACL)
	checkACH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterACH)

	containerAC := container.NewVBox(widgetAC,
		container.NewHBox(checkACL, checkACH))

	// ---------------- Privileges Required (PR) ----------------
	widgetPR := widget.NewLabelWithStyle("Privileges Required (PR)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkPRN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterPRN)
	checkPRL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterPRL)
	checkPRH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterPRH)

	containerPR := container.NewVBox(widgetPR,
		container.NewHBox(checkPRN, checkPRL, checkPRH))

	// ---------------- User Interaction (UI) ----------------
	widgetUI := widget.NewLabelWithStyle("User Interaction (UI)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkUIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterUIN)
	checkUIR := widget.NewCheckWithData("Required (R)", actCVEFilter.BindingData.FilterUIR)

	containerUI := container.NewVBox(widgetUI,
		container.NewHBox(checkUIN, checkUIR))

	// ---------------- Scope (S) ----------------
	widgetS := widget.NewLabelWithStyle("Scope (S)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkSU := widget.NewCheckWithData("Unchanged (U)", actCVEFilter.BindingData.FilterSU)
	checkSC := widget.NewCheckWithData("Changed (C)", actCVEFilter.BindingData.FilterSC)

	containerS := container.NewVBox(widgetS,
		container.NewHBox(checkSU, checkSC))

	// ---------------- Confidentiality (C) ----------------
	widgetC := widget.NewLabelWithStyle("Confidentiality (C)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkCN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCN)
	checkCL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCL)
	checkCH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCH)

	containerC := container.NewVBox(widgetC,
		container.NewHBox(checkCN, checkCL, checkCH))

	// ---------------- Integrity (I) ----------------
	widgetI := widget.NewLabelWithStyle("Integrity (I)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterIN)
	checkIL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterIL)
	checkIH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterIH)

	containerI := container.NewVBox(widgetI,
		container.NewHBox(checkIN, checkIL, checkIH))

	// ---------------- Availability (A) ----------------
	widgetA := widget.NewLabelWithStyle("Availability (A)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterAN)
	checkAL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterAL)
	checkAH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterAH)

	containerA := container.NewVBox(widgetA,
		container.NewHBox(checkAN, checkAL, checkAH))

	// ---------------- Container complete ----------------
	return container.NewVBox(containerAV, containerAC, containerPR, containerUI, containerS, widget.NewSeparator(), containerC, containerI, containerA)
}

// Create an empty table for CVE overview. Only the headline is set.
func createCVETable(headline bool, numCols int) *widget.Table {
	numRows := 1

	table := widget.NewTable(
		// set the size of the table
		func() (int, int) { return numRows, numCols },
		// define the type of the cell
		func() fyne.CanvasObject {
			return widget.NewLabelWithStyle("", fyne.TextAlignLeading, fyne.TextStyle{Bold: false})
		},
		// define the update mechanism of all cells
		func(id widget.TableCellID, cell fyne.CanvasObject) {
			if headline {
				switch id.Row {
				case 0:
					cell.(*widget.Label).TextStyle = fyne.TextStyle{Bold: true}
					cell.(*widget.Label).SetText(tableHeadlineShort[id.Col])
				}
			}
		})

	// set the table column width for each CVE metric
	table.SetColumnWidth(0, 130) // CVE Id
	table.SetColumnWidth(1, 60)  // Score
	table.SetColumnWidth(2, 90)  // AV
	table.SetColumnWidth(3, 50)  // AC
	table.SetColumnWidth(4, 60)  // PR
	table.SetColumnWidth(5, 80)  // UI
	table.SetColumnWidth(6, 110) // S
	table.SetColumnWidth(7, 60)  // C
	table.SetColumnWidth(8, 60)  // I
	table.SetColumnWidth(9, 60)  // A

	return table
}

func updateCVETable(tableCVE *widget.Table, listOfCVEs []model.CVE, numCols int) {
	var tableData = [][]string{}

	for _, cve := range listOfCVEs {
		tmpArray := model.ConvCVEStruct(cve, numCols)
		tableData = append(tableData, tmpArray)
	}

	numRows := len(tableData)
	tableCVE.Length = func() (int, int) {
		return numRows, numCols
	}

	tableCVE.UpdateCell = func(id widget.TableCellID, template fyne.CanvasObject) {
		template.(*widget.Label).SetText(tableData[id.Row][id.Col])
	}

	// Necessary because otherwise the update of the cells is not displayed.
	tableCVE.Refresh()
}

// Create a file save dialog for the CVE export
func createExportDialog(window fyne.Window, exportFileName string, ctrl chan string) *dialog.FileDialog {
	exportDialog := dialog.NewFileSave(
		func(file fyne.URIWriteCloser, err error) {
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			if file == nil {
				log.Println("Export cancelled by user.")
				ctrl <- ""
				return
			}
			err = file.Close()
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			ctrl <- file.URI().Name()
		}, window)

	workDirPath, err := os.Getwd()
	if err != nil {
		log.Printf("Could not get the rooted path name corresponding to the current directory. Error message: %s", err)
	} else {
		workDirPathUri, err := storage.ListerForURI(storage.NewFileURI(workDirPath))
		if err != nil {
			log.Printf("Could not convert the URI. Error message: %s", err)
		} else {
			exportDialog.SetLocation(workDirPathUri)
		}
	}
	exportDialog.SetFilter(storage.NewExtensionFileFilter([]string{".csv"}))
	exportDialog.SetFileName(exportFileName)
	exportDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-80, window.Canvas().Size().Height-80))

	return exportDialog
}

// https://stackoverflow.com/questions/23743217/printing-output-to-a-command-window-when-golang-application-is-compiled-with-ld/23744350
// https://forum.golangbridge.org/t/no-println-output-with-go-build-ldflags-h-windowsgui/7633/6
// this functions open the windows standard console window
func showWindowsConsole(show bool) {
	getConsoleWindow := syscall.NewLazyDLL("kernel32.dll").NewProc("GetConsoleWindow")
	if getConsoleWindow.Find() != nil {
		return
	}

	showWindow := syscall.NewLazyDLL("user32.dll").NewProc("ShowWindow")
	if showWindow.Find() != nil {
		return
	}

	hwnd, _, _ := getConsoleWindow.Call()
	if hwnd == 0 {
		return
	}

	if show {
		showWindow.Call(hwnd, syscall.SW_RESTORE)
		log.Println("Windows console window is displayed")
	} else {
		showWindow.Call(hwnd, syscall.SW_HIDE)
		log.Println("Windows console window is hided")
	}
}
