package gui

import (
	"log"
	"os/exec"
	"syscall"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/app"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"

	"github.com/KingKeule/CVE-Filter/pkg/config"
)

// var screenWidth float32 =
var menuHeight float32 = 26

const appname = "CVE-Filter"
const version = "v0.1"
const gitHubLink = "https://github.com/KingKeule/CVE-Filter"

//Initialization of the GUI
func InitGUI() {

	// hide the windows console window
	showWindowsConsole(false)

	// ---------------- App/window configuration ----------------
	// Initialize our new fyne interface application.
	app := app.New()

	// set the theme for the app. Default is dark theme
	app.Settings().SetTheme(theme.DarkTheme())

	// Initialize our new fyne interface application.
	window := app.NewWindow(" " + appname + " " + version)

	// indicates that closing this main window should exit the app
	window.SetMaster()

	// center the windows on the screen
	window.CenterOnScreen()

	// do not allow to resize the window
	window.SetFixedSize(true)

	actCVEFilter := config.InitCVEFilter()

	containerFilter := createFilterContainer(actCVEFilter, window)

	window.SetContent(containerFilter)

	// Resize only in width due the menu width and take the actual height of the window
	window.Resize(fyne.NewSize(window.Canvas().Size().Width, window.Canvas().Size().Height + +menuHeight))

	// ---------------- Menu ----------------
	// define and add the menu to the window
	window.SetMainMenu(fyne.NewMainMenu(
		fyne.NewMenu("Tool",
			fyne.NewMenuItem("Save filter", func() {
				error := config.WriteCVEFilterToFile(actCVEFilter)
				if error {
					dialog.ShowInformation("", "Error while saving.\n See log for more details", window)
				} else {
					dialog.ShowInformation("", "Configuration file ("+config.ConfigFileName+")\n was saved successfully", window)
				}
			}),
			fyne.NewMenuItem("Reset filter", func() {
				config.ResetCVEFilter(actCVEFilter)
			})),
		fyne.NewMenu("Help",
			fyne.NewMenuItem("Show Log", func() {
				showWindowsConsole(true)
			}),
			fyne.NewMenuItem("About", func() {
				// windows command to open the browser with the given link
				exec.Command("rundll32", "url.dll,FileProtocolHandler", gitHubLink).Start()
				log.Println("Open github site from the project")
			}),
		)))

	// Show all of our set content and run the gui.
	window.ShowAndRun()
}

func createFilterContainer(actCVEFilter config.CVEFilter, _ fyne.Window) fyne.CanvasObject {

	// ---------------- Attack Vector (AV) ----------------
	widgetAV := widget.NewLabelWithStyle("Attack Vector (AV)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAVN := widget.NewCheckWithData("Network (N)", actCVEFilter.BindingData.FilterAVN)
	checkAVA := widget.NewCheckWithData("Adjacent (A)", actCVEFilter.BindingData.FilterAVA)
	checkAVL := widget.NewCheckWithData("Local(L)", actCVEFilter.BindingData.FilterAVL)
	checkAVP := widget.NewCheckWithData("Physical(P)", actCVEFilter.BindingData.FilterAVP)

	containerAV := container.NewVBox(widgetAV,
		container.NewHBox(checkAVN, checkAVA, checkAVL, checkAVP))

	// ---------------- Attack Complexity (AC) ----------------
	widgetAC := widget.NewLabelWithStyle("Attack Complexity (AC)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkACL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterACL)
	checkACH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterACH)

	containerAC := container.NewVBox(widgetAC,
		container.NewHBox(checkACL, checkACH))

	// ---------------- Privileges Required (PR) ----------------
	widgetPR := widget.NewLabelWithStyle("Privileges Required (PR)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkPRN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterPRN)
	checkPRL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterPRL)
	checkPRH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterPRH)

	containerPR := container.NewVBox(widgetPR,
		container.NewHBox(checkPRN, checkPRL, checkPRH))

	// ---------------- User Interaction (UI) ----------------
	widgetUI := widget.NewLabelWithStyle("User Interaction (UI)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkUIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterUIN)
	checkUIR := widget.NewCheckWithData("Required (R)", actCVEFilter.BindingData.FilterUIR)

	containerUI := container.NewVBox(widgetUI,
		container.NewHBox(checkUIN, checkUIR))

	// ---------------- Scope (S) ----------------
	widgetS := widget.NewLabelWithStyle("Scope (S)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkSU := widget.NewCheckWithData("Unchanged (U)", actCVEFilter.BindingData.FilterSU)
	checkSC := widget.NewCheckWithData("Changed (C)", actCVEFilter.BindingData.FilterSC)

	containerS := container.NewVBox(widgetS,
		container.NewHBox(checkSU, checkSC))

	// ---------------- Confidentiality (C) ----------------
	widgetC := widget.NewLabelWithStyle("Confidentiality (C)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkCN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCN)
	checkCL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCL)
	checkCH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCH)

	containerC := container.NewVBox(widgetC,
		container.NewHBox(checkCN, checkCL, checkCH))

	// ---------------- Integrity (I) ----------------
	widgetI := widget.NewLabelWithStyle("Integrity (I)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterIN)
	checkIL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterIL)
	checkIH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterIH)

	containerI := container.NewVBox(widgetI,
		container.NewHBox(checkIN, checkIL, checkIH))

	// ---------------- Availability (A) ----------------
	widgetA := widget.NewLabelWithStyle("Availability (A)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterAN)
	checkAL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterAL)
	checkAH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterAH)

	containerA := container.NewVBox(widgetA,
		container.NewHBox(checkAN, checkAL, checkAH))

	// ---------------- Container complete ----------------
	return container.NewVBox(containerAV, containerAC, containerPR, containerUI, containerS, widget.NewSeparator(), containerC, containerI, containerA)
}

// https://stackoverflow.com/questions/23743217/printing-output-to-a-command-window-when-golang-application-is-compiled-with-ld/23744350
// https://forum.golangbridge.org/t/no-println-output-with-go-build-ldflags-h-windowsgui/7633/6
// this functions open the windows standard console window
func showWindowsConsole(show bool) {
	getConsoleWindow := syscall.NewLazyDLL("kernel32.dll").NewProc("GetConsoleWindow")
	if getConsoleWindow.Find() != nil {
		return
	}

	showWindow := syscall.NewLazyDLL("user32.dll").NewProc("ShowWindow")
	if showWindow.Find() != nil {
		return
	}

	hwnd, _, _ := getConsoleWindow.Call()
	if hwnd == 0 {
		return
	}

	if show {
		showWindow.Call(hwnd, syscall.SW_RESTORE)
		log.Println("Windows console window is displayed")
	} else {
		showWindow.Call(hwnd, syscall.SW_HIDE)
		log.Println("Windows console window is hided")
	}
}
