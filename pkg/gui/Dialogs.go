package gui

import (
	"log"
	"os"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
)

func createProgressInfo(window fyne.Window) (dialog.Dialog, *widget.ProgressBar) {
	progressInfo := widget.NewProgressBar()
	dialogText := widget.NewLabelWithStyle("Downloading CVE infomation.\nThis could take a while.", fyne.TextAlignCenter, fyne.TextStyle{Bold: false})
	dialogCont := container.NewVBox(dialogText, progressInfo)
	customDialog := dialog.NewCustom("Info", "Abort download", dialogCont, window)
	customDialog.Resize(fyne.NewSize(customDialog.MinSize().Width+100, customDialog.MinSize().Height))
	return customDialog, progressInfo
}

func createCVEInfoDialog(window fyne.Window, id string, description string) dialog.Dialog {
	dialogText := widget.NewRichTextWithText(description)
	dialogText.Scroll = container.ScrollVerticalOnly
	dialogText.Wrapping = fyne.TextWrapWord
	copyClipboard := widget.NewButtonWithIcon("", theme.ContentCopyIcon(), func() {
		window.Clipboard().SetContent(description)
	})
	container := container.NewBorder(nil, container.NewHBox(layout.NewSpacer(), copyClipboard), nil, nil, dialogText)
	customDialog := dialog.NewCustom("Description of "+id, "OK", container, window)
	customDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-200, window.Canvas().Size().Height-200))
	return customDialog
}

// Create a file save dialog for the CVE export
func createExportDialog(window fyne.Window, exportFileName string, ctrl chan string) *dialog.FileDialog {
	exportDialog := dialog.NewFileSave(
		func(file fyne.URIWriteCloser, err error) {
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			if file == nil {
				log.Println("Export cancelled by user.")
				ctrl <- ""
				return
			}
			err = file.Close()
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			ctrl <- file.URI().Name()
		}, window)

	workDirPath, err := os.Getwd()
	if err != nil {
		log.Printf("Could not get the rooted path name corresponding to the current directory. Error message: %s", err)
	} else {
		workDirPathUri, err := storage.ListerForURI(storage.NewFileURI(workDirPath))
		if err != nil {
			log.Printf("Could not convert the URI. Error message: %s", err)
		} else {
			exportDialog.SetLocation(workDirPathUri)
		}
	}
	exportDialog.SetFilter(storage.NewExtensionFileFilter([]string{".csv"}))
	exportDialog.SetFileName(exportFileName)
	exportDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-80, window.Canvas().Size().Height-80))

	return exportDialog
}
