package gui

import (
	"errors"
	"fmt"
	"log"
	"os"
	"os/exec"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/KingKeule/CVE-Filter/pkg/model"
)

const DialogConfirmText = "OK"
const DialogDismissText = "Cancel"

func createUserApiDialog(window fyne.Window, apiKey binding.String) dialog.Dialog {
	inputApiKey := widget.NewEntryWithData(apiKey) // current no NewPasswordEntry() available for binding data
	inputApiKeyFI := widget.NewFormItem("Please enter your API key: ", inputApiKey)

	customDialog := dialog.NewForm("Fast download", DialogConfirmText, DialogDismissText, []*widget.FormItem{inputApiKeyFI}, apiDialogCB, window)
	customDialog.Resize(fyne.NewSize(customDialog.MinSize().Width+300, customDialog.MinSize().Height+20))

	return customDialog
}

func apiDialogCB(confirmed bool) {
	if confirmed {
		prepDownload(true)
	}
}

func createProgressInfo(bindingDataPoolGui model.BindingDataGui, fastDL bool, window fyne.Window) (dialog.Dialog, *widget.ProgressBar) {
	progressInfo := widget.NewProgressBar()
	progressInfo.TextFormatter = func() string {
		return fmt.Sprintf("%.f / %.f", progressInfo.Value, progressInfo.Max)
	}
	dialogText := widget.NewLabelWithData(binding.StringToStringWithFormat(bindingDataPoolGui.CurrentCVE, "%s: Downloading CVE infomation.\nThis could take a while."))
	// dialogText := widget.NewLabelWithStyle("Downloading CVE infomation.\nThis could take a while.", fyne.TextAlignCenter, fyne.TextStyle{Bold: false})
	dialogCont := container.NewVBox(dialogText, progressInfo, customSpacerSm)

	title := "Slow Download"
	if fastDL {
		title = "Fast Download"
	}
	customDialog := dialog.NewCustom(title, "Abort download", dialogCont, window)
	customDialog.Resize(fyne.NewSize(customDialog.MinSize().Width+100, customDialog.MinSize().Height))
	return customDialog, progressInfo
}

func createInfoDialog(window fyne.Window, title string, description string) dialog.Dialog {
	dialogText := widget.NewRichTextWithText(description)
	dialogText.Scroll = container.ScrollVerticalOnly
	dialogText.Wrapping = fyne.TextWrapWord
	copyClipboard := widget.NewButtonWithIcon("", theme.ContentCopyIcon(), func() {
		window.Clipboard().SetContent(description)
	})

	cont := &fyne.Container{}
	if strings.HasPrefix(title, "Descr") {
		nvdLinkBtn := widget.NewButton("NVD Website", func() {
			nvdDetailLink, err := bindingDataPoolGui.NVDDetailURL.Get()
			if err != nil {
				log.Println("Error while reading the NVD detail url.")
				return
			}
			exec.Command("rundll32", "url.dll,FileProtocolHandler", nvdDetailLink+title[15:]).Start()
			log.Println("Open the NVD site for CVE details.")
		})
		cont = container.NewBorder(nil, container.NewHBox(layout.NewSpacer(), nvdLinkBtn, copyClipboard), nil, nil, dialogText)
	} else {
		cont = container.NewBorder(nil, container.NewHBox(layout.NewSpacer(), copyClipboard), nil, nil, dialogText)
	}

	customDialog := dialog.NewCustom(title, DialogConfirmText, cont, window)
	customDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-200, window.Canvas().Size().Height-300))
	return customDialog
}

func createWarnDialog(window fyne.Window, description string) dialog.Dialog {
	customDialog := dialog.NewError(errors.New(description), window)
	return customDialog
}

func createNotFoundOnNVDDialog(window fyne.Window, notFoundOnNVD []string) dialog.Dialog {
	notFoundOnNVDStr := strings.Join(notFoundOnNVD, ",")
	infoText := widget.NewLabel("Following CVE(s) do not exist on NVD or may be reserved/rejected:")
	dialogText := widget.NewRichTextWithText(notFoundOnNVDStr)
	dialogText.Scroll = container.ScrollVerticalOnly
	dialogText.Wrapping = fyne.TextWrapWord
	copyClipboard := widget.NewButtonWithIcon("", theme.ContentCopyIcon(), func() {
		window.Clipboard().SetContent(notFoundOnNVDStr)
	})
	container := container.NewBorder(infoText, container.NewHBox(layout.NewSpacer(), copyClipboard), nil, nil, dialogText)
	customDialog := dialog.NewCustom("WARNING", DialogConfirmText, container, window)
	customDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-300, window.Canvas().Size().Height-400))
	return customDialog
}

// Create a file save dialog for the CVE export
func createExportDialog(window fyne.Window, exportFileName string, ctrl chan string) *dialog.FileDialog {
	exportDialog := dialog.NewFileSave(
		func(file fyne.URIWriteCloser, err error) {
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			if file == nil {
				log.Println("File export dialog cancelled by user.")
				ctrl <- ""
				return
			}
			err = file.Close()
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			ctrl <- file.URI().Path()
		}, window)

	// Get the current path of the cve filter to set this as the default export path in the file dialog instead of C:/users/<user>
	workDirPath, err := os.Getwd()
	if err != nil {
		log.Printf("Could not get the rooted path name corresponding to the current directory. Error message: %s", err)
	} else {
		workDirPathUri, err := storage.ListerForURI(storage.NewFileURI(workDirPath))
		if err != nil {
			log.Printf("Could not convert the URI. Error message: %s", err)
		} else {
			exportDialog.SetLocation(workDirPathUri)
		}
	}
	exportDialog.SetFilter(storage.NewExtensionFileFilter([]string{".csv"}))
	exportDialog.SetFileName(exportFileName)
	exportDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-80, window.Canvas().Size().Height-80))

	return exportDialog
}

// Create a file open dialog for the CVE import
func createImportDialog(window fyne.Window, ctrl chan string) *dialog.FileDialog {
	importDialog := dialog.NewFileOpen(
		func(file fyne.URIReadCloser, err error) {
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			if file == nil {
				log.Println("File import dialog cancelled by user.")
				ctrl <- ""
				return
			}
			err = file.Close()
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			ctrl <- file.URI().Path()
		}, window)

	workDirPath, err := os.Getwd()
	if err != nil {
		log.Printf("Could not get the rooted path name corresponding to the current directory. Error message: %s", err)
	} else {
		workDirPathUri, err := storage.ListerForURI(storage.NewFileURI(workDirPath))
		if err != nil {
			log.Printf("Could not convert the URI. Error message: %s", err)
		} else {
			importDialog.SetLocation(workDirPathUri)
		}
	}
	importDialog.SetFilter(storage.NewExtensionFileFilter([]string{".csv"}))
	importDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-80, window.Canvas().Size().Height-80))

	return importDialog
}
