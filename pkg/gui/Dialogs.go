package gui

import (
	"errors"
	"log"
	"os"
	"strings"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/dialog"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/storage"
	"fyne.io/fyne/v2/theme"
	"fyne.io/fyne/v2/widget"
	"github.com/KingKeule/CVE-Filter/pkg/service"
)

const DialogConfirmText = "OK"
const DialogDismissText = "Cancel"

func createUserApiDialog(window fyne.Window) (dialog.Dialog, *widget.Entry) {
	inputApiKey := widget.NewPasswordEntry()
	// inputApiKey.SetPlaceHolder("XXXX-YYYY-ZZZZ")
	inputApiKeyFI := widget.NewFormItem("Please enter your API key: ", inputApiKey)

	customDialog := dialog.NewForm("Fast download", DialogConfirmText, DialogDismissText, []*widget.FormItem{inputApiKeyFI}, apiDialogCB, window)
	customDialog.Resize(fyne.NewSize(customDialog.MinSize().Width+200, customDialog.MinSize().Height+20))

	return customDialog, inputApiKey
}

func apiDialogCB(confirmed bool) {
	log.Println(confirmed)
	if confirmed {
		service.FastDL = true
		prepDownload()
	}
}

func createDelayDialog(window fyne.Window) (dialog.Dialog, *widget.Entry) {
	inputDelay := widget.NewEntry()
	inputDelay.SetText(service.DownloadDelay)
	inputDelayFI := widget.NewFormItem("Please enter delay between 2 downloads [sec]: ", inputDelay)

	customDialog := dialog.NewForm("Fast download", DialogConfirmText, DialogDismissText, []*widget.FormItem{inputDelayFI}, delayDialogCB, window)
	customDialog.Resize(fyne.NewSize(customDialog.MinSize().Width, customDialog.MinSize().Height+20))

	return customDialog, inputDelay
}

func delayDialogCB(confirmed bool) {
	if confirmed {
		service.FastDL = false
		prepDownload()
	}
}

func createProgressInfo(fastDL bool, window fyne.Window) (dialog.Dialog, *widget.ProgressBar) {
	progressInfo := widget.NewProgressBar()
	dialogText := widget.NewLabelWithStyle("Downloading CVE infomation.\nThis could take a while.", fyne.TextAlignCenter, fyne.TextStyle{Bold: false})
	dialogCont := container.NewVBox(dialogText, progressInfo)

	title := "Slow Download"
	if fastDL {
		title = "Fast Download"
	}
	customDialog := dialog.NewCustom(title, "Abort download", dialogCont, window)
	customDialog.Resize(fyne.NewSize(customDialog.MinSize().Width+100, customDialog.MinSize().Height))
	return customDialog, progressInfo
}

func createInfoDialog(window fyne.Window, title string, description string) dialog.Dialog {
	dialogText := widget.NewRichTextWithText(description)
	dialogText.Scroll = container.ScrollVerticalOnly
	dialogText.Wrapping = fyne.TextWrapWord
	copyClipboard := widget.NewButtonWithIcon("", theme.ContentCopyIcon(), func() {
		window.Clipboard().SetContent(description)
	})
	container := container.NewBorder(nil, container.NewHBox(layout.NewSpacer(), copyClipboard), nil, nil, dialogText)
	customDialog := dialog.NewCustom(title, "OK", container, window)
	customDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-200, window.Canvas().Size().Height-300))
	return customDialog
}

func createWarnDialog(window fyne.Window, description string) dialog.Dialog {
	customDialog := dialog.NewError(errors.New(description), window)
	return customDialog
}

func createNotFoundOnNVDDialog(window fyne.Window, notFoundOnNVD []string) dialog.Dialog {
	notFoundOnNVDStr := strings.Join(notFoundOnNVD, ",")
	infoText := widget.NewLabel("A problem occured while download the CVE information.\n" +
		"Following CVE(s) CVE could not be found at NVD:")
	dialogText := widget.NewRichTextWithText(notFoundOnNVDStr)
	dialogText.Scroll = container.ScrollVerticalOnly
	dialogText.Wrapping = fyne.TextWrapWord
	copyClipboard := widget.NewButtonWithIcon("", theme.ContentCopyIcon(), func() {
		window.Clipboard().SetContent(notFoundOnNVDStr)
	})
	container := container.NewBorder(infoText, container.NewHBox(layout.NewSpacer(), copyClipboard), nil, nil, dialogText)
	customDialog := dialog.NewCustom("Information", "OK", container, window)
	customDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-300, window.Canvas().Size().Height-400))
	return customDialog
}

// Create a file save dialog for the CVE export
func createExportDialog(window fyne.Window, exportFileName string, ctrl chan string) *dialog.FileDialog {
	exportDialog := dialog.NewFileSave(
		func(file fyne.URIWriteCloser, err error) {
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			if file == nil {
				log.Println("Export cancelled by user.")
				ctrl <- ""
				return
			}
			err = file.Close()
			if err != nil {
				log.Printf("Error: %s", err)
				ctrl <- ""
				return
			}
			ctrl <- file.URI().Name()
		}, window)

	workDirPath, err := os.Getwd()
	if err != nil {
		log.Printf("Could not get the rooted path name corresponding to the current directory. Error message: %s", err)
	} else {
		workDirPathUri, err := storage.ListerForURI(storage.NewFileURI(workDirPath))
		if err != nil {
			log.Printf("Could not convert the URI. Error message: %s", err)
		} else {
			exportDialog.SetLocation(workDirPathUri)
		}
	}
	exportDialog.SetFilter(storage.NewExtensionFileFilter([]string{".csv"}))
	exportDialog.SetFileName(exportFileName)
	exportDialog.Resize(fyne.NewSize(window.Canvas().Size().Width-80, window.Canvas().Size().Height-80))

	return exportDialog
}
