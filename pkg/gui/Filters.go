package gui

import (
	"log"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/widget"
	"github.com/KingKeule/CVE-Filter/pkg/config"
)

// Create the container for filtering the CVSS Base Score
func createFilterScoreContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {
	log.Println("Create the container with the filter option for the CVSS base score.")

	// Filter by the Base Score category
	widScoreCat := widget.NewLabelWithStyle("Filter via category:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkScoreCatLow := widget.NewCheckWithData("Low (0.1 - 3.9)", actCVEFilter.BindingData.FilterBaseSeverityLow)
	checkScoreCatMed := widget.NewCheckWithData("Medium (4.0 - 6.9)", actCVEFilter.BindingData.FilterBaseSeverityMed)
	checkScoreCatHigh := widget.NewCheckWithData("High (7.0 - 8.9)", actCVEFilter.BindingData.FilterBaseSeverityHigh)
	checkScoreCatCrit := widget.NewCheckWithData("Critical (9.0 - 10.0)", actCVEFilter.BindingData.FilterBaseSeverityCrit)

	containerScoreCat := container.NewHBox(checkScoreCatLow, checkScoreCatMed, checkScoreCatHigh, checkScoreCatCrit)

	// Filter by a Base Score range
	scoreMin := actCVEFilter.BindingData.FilterBaseScoreMin
	scoreMax := actCVEFilter.BindingData.FilterBaseScoreMax

	widBaseScore := widget.NewLabelWithStyle("Filter via Base Score range:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetBaseScoreMin := widget.NewLabelWithStyle("Min. CVSS 3.1 Base Score:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetScoreValueMin := widget.NewLabelWithData(binding.FloatToStringWithFormat(scoreMin, "%0.1f"))
	widgetBaseScoreMax := widget.NewLabelWithStyle("Max. CVSS 3.1 Base Score:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetScoreValueMax := widget.NewLabelWithData(binding.FloatToStringWithFormat(scoreMax, "%0.1f"))

	sliderScoreMin := widget.NewSliderWithData(0, 10, scoreMin)
	sliderScoreMin.Step = 0.1
	sliderScoreMax := widget.NewSliderWithData(0, 10, scoreMax)
	sliderScoreMax.Step = 0.1

	containerScoreMin := container.NewVBox(container.NewHBox(widgetBaseScoreMin, widgetScoreValueMin), sliderScoreMin)
	containerScoreMax := container.NewVBox(container.NewHBox(widgetBaseScoreMax, widgetScoreValueMax), sliderScoreMax)
	containerScoreRange := container.NewVBox(widBaseScore, containerScoreMin, containerScoreMax)

	container := container.NewVBox(widScoreCat, containerScoreCat, widget.NewSeparator(), containerScoreRange)

	// Hide the range filter at startup if one of the base severity categories is checked in the configuration
	if checkScoreCatLow.Checked || checkScoreCatMed.Checked || checkScoreCatHigh.Checked || checkScoreCatCrit.Checked {
		containerScoreRange.Hide()
	}

	// Hide the range filter at runtime if one of the base severity categories is checked
	checkScoreCatLow.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityLow.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkScoreCatMed.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityMed.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkScoreCatHigh.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityHigh.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkScoreCatCrit.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterBaseSeverityCrit.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}

	log.Println("Container with the filter option for the CVSS base score is created.")
	return container
}

func updateGuiScoreRange(actCVEFilter config.CVEFilter, containerScoreRange *fyne.Container, scoreMin binding.Float, scoreMax binding.Float) {
	checkMinValue, _ := actCVEFilter.BindingData.FilterBaseSeverityLow.Get()
	checkMedValue, _ := actCVEFilter.BindingData.FilterBaseSeverityMed.Get()
	checkHighValue, _ := actCVEFilter.BindingData.FilterBaseSeverityHigh.Get()
	checkCritValue, _ := actCVEFilter.BindingData.FilterBaseSeverityCrit.Get()

	if checkMinValue || checkMedValue || checkHighValue || checkCritValue {
		scoreMin.Set(0)
		scoreMax.Set(10)
		containerScoreRange.Hide()
	} else {
		containerScoreRange.Show()
	}
}

// Create the container for filtering the CVSS Metrics
func createFilterMetricsContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {
	log.Println("Create the container with the filter option for the CVSS metrics.")

	// ---------------- Attack Vector (AV) ----------------
	widgetAV := widget.NewLabelWithStyle("Attack Vector (AV)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAVN := widget.NewCheckWithData("Network (N)", actCVEFilter.BindingData.FilterAVN)
	checkAVA := widget.NewCheckWithData("Adjacent (A)", actCVEFilter.BindingData.FilterAVA)
	checkAVL := widget.NewCheckWithData("Local(L)", actCVEFilter.BindingData.FilterAVL)
	checkAVP := widget.NewCheckWithData("Physical(P)", actCVEFilter.BindingData.FilterAVP)

	containerAV := container.NewVBox(widgetAV,
		container.NewHBox(checkAVN, checkAVA, checkAVL, checkAVP))

	// ---------------- Attack Complexity (AC) ----------------
	widgetAC := widget.NewLabelWithStyle("Attack Complexity (AC)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkACL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterACL)
	checkACH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterACH)

	containerAC := container.NewVBox(widgetAC,
		container.NewHBox(checkACL, checkACH))

	// ---------------- Privileges Required (PR) ----------------
	widgetPR := widget.NewLabelWithStyle("Privileges Required (PR)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkPRN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterPRN)
	checkPRL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterPRL)
	checkPRH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterPRH)

	containerPR := container.NewVBox(widgetPR,
		container.NewHBox(checkPRN, checkPRL, checkPRH))

	// ---------------- User Interaction (UI) ----------------
	widgetUI := widget.NewLabelWithStyle("User Interaction (UI)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkUIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterUIN)
	checkUIR := widget.NewCheckWithData("Required (R)", actCVEFilter.BindingData.FilterUIR)

	containerUI := container.NewVBox(widgetUI,
		container.NewHBox(checkUIN, checkUIR))

	// ---------------- Scope (S) ----------------
	widgetS := widget.NewLabelWithStyle("Scope (S)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkSU := widget.NewCheckWithData("Unchanged (U)", actCVEFilter.BindingData.FilterSU)
	checkSC := widget.NewCheckWithData("Changed (C)", actCVEFilter.BindingData.FilterSC)

	containerS := container.NewVBox(widgetS,
		container.NewHBox(checkSU, checkSC))

	// ---------------- Confidentiality (C) ----------------
	widgetC := widget.NewLabelWithStyle("Confidentiality (C)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkCN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCN)
	checkCL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCL)
	checkCH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCH)

	containerC := container.NewVBox(widgetC,
		container.NewHBox(checkCN, checkCL, checkCH))

	// ---------------- Integrity (I) ----------------
	widgetI := widget.NewLabelWithStyle("Integrity (I)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterIN)
	checkIL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterIL)
	checkIH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterIH)

	containerI := container.NewVBox(widgetI,
		container.NewHBox(checkIN, checkIL, checkIH))

	// ---------------- Availability (A) ----------------
	widgetA := widget.NewLabelWithStyle("Availability (A)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterAN)
	checkAL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterAL)
	checkAH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterAH)

	containerA := container.NewVBox(widgetA,
		container.NewHBox(checkAN, checkAL, checkAH))

	// ---------------- Container complete ----------------
	log.Println("Container with the filter option for the CVSS metrics is created.")
	return container.NewVBox(containerAV, containerAC, containerPR, containerUI, containerS, widget.NewSeparator(), containerC, containerI, containerA)
}
