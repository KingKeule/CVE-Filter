package gui

import (
	"log"
	"time"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/container"
	"fyne.io/fyne/v2/data/binding"
	"fyne.io/fyne/v2/layout"
	"fyne.io/fyne/v2/widget"
	"github.com/KingKeule/CVE-Filter/pkg/config"
)

// Create the container for filtering the CVSS Base Score
func createFilterScoreContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {
	log.Println("Create the container with the filter option for the CVSS base score.")
	waitForBinding()

	// Filter by the Base Score category
	widScoreCat := widget.NewLabelWithStyle("Filter via Category", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widBaseScoreCVSSv3Cat := widget.NewLabelWithStyle("CVSSv3 : ", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkCVSSv3ScoreCatLow := widget.NewCheckWithData("Low (0.1 - 3.9)", actCVEFilter.BindingData.FilterCVSSv3BaseSeverityLow)
	checkCVSSv3ScoreCatMed := widget.NewCheckWithData("Medium (4.0 - 6.9)", actCVEFilter.BindingData.FilterCVSSv3BaseSeverityMed)
	checkCVSSv3ScoreCatHigh := widget.NewCheckWithData("High (7.0 - 8.9)", actCVEFilter.BindingData.FilterCVSSv3BaseSeverityHigh)
	checkCVSSv3ScoreCatCrit := widget.NewCheckWithData("Critical (9.0 - 10.0)", actCVEFilter.BindingData.FilterCVSSv3BaseSeverityCrit)
	widBaseScoreCVSSv2Cat := widget.NewLabelWithStyle("CVSSv2 : ", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	checkCVSSv2ScoreCatLow := widget.NewCheckWithData("Low (0.1 - 3.9)", actCVEFilter.BindingData.FilterCVSSv2BaseSeverityLow)
	checkCVSSv2ScoreCatMed := widget.NewCheckWithData("Medium (4.0 - 6.9)", actCVEFilter.BindingData.FilterCVSSv2BaseSeverityMed)
	checkCVSSv2ScoreCatHigh := widget.NewCheckWithData("High (7.0 - 10.0)", actCVEFilter.BindingData.FilterCVSSv2BaseSeverityHigh)
	waitForBinding()

	containerCVSSv3ScoreCat := container.NewHBox(widBaseScoreCVSSv3Cat, checkCVSSv3ScoreCatLow, checkCVSSv3ScoreCatMed, checkCVSSv3ScoreCatHigh, checkCVSSv3ScoreCatCrit)
	containerCVSSv2ScoreCat := container.NewHBox(widBaseScoreCVSSv2Cat, checkCVSSv2ScoreCatLow, checkCVSSv2ScoreCatMed, checkCVSSv2ScoreCatHigh)

	// Filter by a Base Score range
	scoreMin := actCVEFilter.BindingData.FilterBaseScoreMin
	scoreMax := actCVEFilter.BindingData.FilterBaseScoreMax

	widBaseScore := widget.NewLabelWithStyle("Filter via Base Score range", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	infoScoreFilter := widget.NewLabel("(applies to CVSSv3 and CVSSv2)")
	widgetBaseScoreMin := widget.NewLabelWithStyle("Min. Base Score:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetScoreValueMin := widget.NewLabelWithData(binding.FloatToStringWithFormat(scoreMin, "%0.1f"))
	widgetBaseScoreMax := widget.NewLabelWithStyle("Max. Base Score:", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	widgetScoreValueMax := widget.NewLabelWithData(binding.FloatToStringWithFormat(scoreMax, "%0.1f"))
	waitForBinding()

	sliderScoreMin := widget.NewSliderWithData(0, 10, scoreMin)
	sliderScoreMin.Step = 0.1
	sliderScoreMax := widget.NewSliderWithData(0, 10, scoreMax)
	sliderScoreMax.Step = 0.1

	containerScoreMin := container.NewVBox(container.NewHBox(widgetBaseScoreMin, widgetScoreValueMin), sliderScoreMin)
	containerScoreMax := container.NewVBox(container.NewHBox(widgetBaseScoreMax, widgetScoreValueMax), sliderScoreMax)
	containerScoreRange := container.NewVBox(container.NewHBox(widBaseScore, infoScoreFilter), containerScoreMin, containerScoreMax)

	container := container.NewVBox(customSpacerSm, widScoreCat, containerCVSSv3ScoreCat, containerCVSSv2ScoreCat, customSpacerSm, customSpacerSm, widget.NewSeparator(), containerScoreRange)

	waitForBinding()

	// Hide the range filter at startup if one of the base severity categories is checked in the configuration
	if checkCVSSv2ScoreCatLow.Checked || checkCVSSv2ScoreCatMed.Checked || checkCVSSv2ScoreCatHigh.Checked ||
		checkCVSSv3ScoreCatLow.Checked || checkCVSSv3ScoreCatMed.Checked || checkCVSSv3ScoreCatHigh.Checked || checkCVSSv3ScoreCatCrit.Checked {
		containerScoreRange.Hide()
	}

	// Hide the range filter at runtime if one of the base severity categories is checked
	checkCVSSv3ScoreCatLow.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv3BaseSeverityLow.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkCVSSv3ScoreCatMed.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv3BaseSeverityMed.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkCVSSv3ScoreCatHigh.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv3BaseSeverityHigh.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkCVSSv3ScoreCatCrit.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv3BaseSeverityCrit.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkCVSSv2ScoreCatLow.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv2BaseSeverityLow.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkCVSSv2ScoreCatMed.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv2BaseSeverityMed.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}
	checkCVSSv2ScoreCatHigh.OnChanged = func(checked bool) {
		actCVEFilter.BindingData.FilterCVSSv2BaseSeverityHigh.Set(checked) // toDo clear why this must set cause of bindingData
		updateGuiScoreRange(actCVEFilter, containerScoreRange, scoreMin, scoreMax)
	}

	log.Println("Container with the filter option for the CVSS base score is created.")
	return container
}

func updateGuiScoreRange(actCVEFilter config.CVEFilter, containerScoreRange *fyne.Container, scoreMin binding.Float, scoreMax binding.Float) {
	checkCVSSv3MinValue, _ := actCVEFilter.BindingData.FilterCVSSv3BaseSeverityLow.Get()
	checkCVSSv3MedValue, _ := actCVEFilter.BindingData.FilterCVSSv3BaseSeverityMed.Get()
	checkCVSSv3HighValue, _ := actCVEFilter.BindingData.FilterCVSSv3BaseSeverityHigh.Get()
	checkCVSSv3CritValue, _ := actCVEFilter.BindingData.FilterCVSSv3BaseSeverityCrit.Get()
	checkCVSSv2MinValue, _ := actCVEFilter.BindingData.FilterCVSSv2BaseSeverityLow.Get()
	checkCVSSv2MedValue, _ := actCVEFilter.BindingData.FilterCVSSv2BaseSeverityMed.Get()
	checkCVSSv2HighValue, _ := actCVEFilter.BindingData.FilterCVSSv2BaseSeverityHigh.Get()

	if checkCVSSv3MinValue || checkCVSSv3MedValue || checkCVSSv3HighValue || checkCVSSv3CritValue || checkCVSSv2MinValue || checkCVSSv2MedValue || checkCVSSv2HighValue {
		scoreMin.Set(0)
		scoreMax.Set(10)
		containerScoreRange.Hide()
	} else {
		containerScoreRange.Show()
	}
}

// Create the container for filtering the CVSS v3 Metrics
func createCVSSv3FilterContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {
	log.Println("Create the container with the filter option for the CVSS v3 metrics.")
	waitForBinding()

	// ---------------- Attack Vector (AV) ----------------
	widgetAV := widget.NewLabelWithStyle("Attack Vector (AV)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAVN := widget.NewCheckWithData("Network (N)", actCVEFilter.BindingData.FilterCVSSv3AVN)
	checkAVA := widget.NewCheckWithData("Adjacent (A)", actCVEFilter.BindingData.FilterCVSSv3AVA)
	checkAVL := widget.NewCheckWithData("Local(L)", actCVEFilter.BindingData.FilterCVSSv3AVL)
	checkAVP := widget.NewCheckWithData("Physical(P)", actCVEFilter.BindingData.FilterCVSSv3AVP)
	waitForBinding()

	containerAV := container.NewVBox(widgetAV,
		container.NewHBox(checkAVN, checkAVA, checkAVL, checkAVP))

	// ---------------- Attack Complexity (AC) ----------------
	widgetAC := widget.NewLabelWithStyle("Attack Complexity (AC)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkACL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCVSSv3ACL)
	checkACH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCVSSv3ACH)
	waitForBinding()

	containerAC := container.NewVBox(widgetAC,
		container.NewHBox(checkACL, checkACH))

	// ---------------- Privileges Required (PR) ----------------
	widgetPR := widget.NewLabelWithStyle("Privileges Required (PR)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkPRN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv3PRN)
	checkPRL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCVSSv3PRL)
	checkPRH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCVSSv3PRH)
	waitForBinding()

	containerPR := container.NewVBox(widgetPR,
		container.NewHBox(checkPRN, checkPRL, checkPRH))

	// ---------------- User Interaction (UI) ----------------
	widgetUI := widget.NewLabelWithStyle("User Interaction (UI)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkUIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv3UIN)
	checkUIR := widget.NewCheckWithData("Required (R)", actCVEFilter.BindingData.FilterCVSSv3UIR)
	waitForBinding()

	containerUI := container.NewVBox(widgetUI,
		container.NewHBox(checkUIN, checkUIR))

	// ---------------- Scope (S) ----------------
	widgetS := widget.NewLabelWithStyle("Scope (S)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkSU := widget.NewCheckWithData("Unchanged (U)", actCVEFilter.BindingData.FilterCVSSv3SU)
	checkSC := widget.NewCheckWithData("Changed (C)", actCVEFilter.BindingData.FilterCVSSv3SC)
	waitForBinding()

	containerS := container.NewVBox(widgetS,
		container.NewHBox(checkSU, checkSC))

	// ---------------- Confidentiality (C) ----------------
	widgetC := widget.NewLabelWithStyle("Confidentiality (C)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkCN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv3CN)
	checkCL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCVSSv3CL)
	checkCH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCVSSv3CH)
	waitForBinding()

	containerC := container.NewVBox(widgetC,
		container.NewHBox(checkCN, checkCL, checkCH))

	// ---------------- Integrity (I) ----------------
	widgetI := widget.NewLabelWithStyle("Integrity (I)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv3IN)
	checkIL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCVSSv3IL)
	checkIH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCVSSv3IH)
	waitForBinding()

	containerI := container.NewVBox(widgetI,
		container.NewHBox(checkIN, checkIL, checkIH))

	// ---------------- Availability (A) ----------------
	widgetA := widget.NewLabelWithStyle("Availability (A)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv3AN)
	checkAL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCVSSv3AL)
	checkAH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCVSSv3AH)
	waitForBinding()

	containerA := container.NewVBox(widgetA,
		container.NewHBox(checkAN, checkAL, checkAH))

	// ---------------- Conjunction selection of impact categories----------------
	widgetLC := widget.NewLabelWithStyle("Logical conjunction (of C,I,A):", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	radioLC := widget.NewRadioGroup([]string{"AND", "OR"}, func(value string) {
		conjunctionImpact = value
	})
	radioLC.Selected = conjunctionImpact
	radioLC.Horizontal = true
	contLC := container.NewHBox(widgetLC, radioLC)

	// ---------------- Container complete ----------------
	log.Println("Container with the filter option for the CVSS metrics is created.")
	return container.NewVBox(customSpacerSm, containerAV, containerAC, containerPR, containerUI, containerS, widget.NewSeparator(),
		container.NewHBox(container.NewVBox(containerC, containerI, containerA), layout.NewSpacer(), contLC))
}

// Create the container for filtering the CVSS v2 Metrics
func createCVSSv2FilterContainer(actCVEFilter config.CVEFilter) fyne.CanvasObject {
	log.Println("Create the container with the filter option for the CVSS v2 metrics.")
	waitForBinding()

	// ---------------- Access Vector (AV) ----------------
	widgetAV := widget.NewLabelWithStyle("Access Vector (AV)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAVN := widget.NewCheckWithData("Network (N)", actCVEFilter.BindingData.FilterCVSSv2AVN)
	checkAVA := widget.NewCheckWithData("Adjacent (A)", actCVEFilter.BindingData.FilterCVSSv2AVA)
	checkAVL := widget.NewCheckWithData("Local(L)", actCVEFilter.BindingData.FilterCVSSv2AVL)
	waitForBinding()

	containerAV := container.NewVBox(widgetAV,
		container.NewHBox(checkAVN, checkAVA, checkAVL))

	// ---------------- Access Complexity (AC) ----------------
	widgetAC := widget.NewLabelWithStyle("Access Complexity (AC)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkACL := widget.NewCheckWithData("Low (L)", actCVEFilter.BindingData.FilterCVSSv2ACL)
	checkACM := widget.NewCheckWithData("Medium (L)", actCVEFilter.BindingData.FilterCVSSv2ACM)
	checkACH := widget.NewCheckWithData("High (H)", actCVEFilter.BindingData.FilterCVSSv2ACH)
	waitForBinding()

	containerAC := container.NewVBox(widgetAC,
		container.NewHBox(checkACL, checkACM, checkACH))

	// ---------------- Authentication (Au) ----------------
	widgetAU := widget.NewLabelWithStyle("Authentication (AU)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAUN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv2AUN)
	checkAUS := widget.NewCheckWithData("Single (S)", actCVEFilter.BindingData.FilterCVSSv2AUS)
	checkAUM := widget.NewCheckWithData("Multiple (M)", actCVEFilter.BindingData.FilterCVSSv2AUM)
	waitForBinding()

	containerAU := container.NewVBox(widgetAU,
		container.NewHBox(checkAUN, checkAUS, checkAUM))

	// ---------------- Confidentiality (C) ----------------
	widgetC := widget.NewLabelWithStyle("Confidentiality (C)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkCN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv2CN)
	checkCP := widget.NewCheckWithData("Partial (P)", actCVEFilter.BindingData.FilterCVSSv2CP)
	checkCH := widget.NewCheckWithData("Complete (C)", actCVEFilter.BindingData.FilterCVSSv2CC)
	waitForBinding()

	containerC := container.NewVBox(widgetC,
		container.NewHBox(checkCN, checkCP, checkCH))

	// ---------------- Integrity (I) ----------------
	widgetI := widget.NewLabelWithStyle("Integrity (I)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkIN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv2IN)
	checkIP := widget.NewCheckWithData("Partial (P)", actCVEFilter.BindingData.FilterCVSSv2IP)
	checkIH := widget.NewCheckWithData("Complete (C)", actCVEFilter.BindingData.FilterCVSSv2IC)
	waitForBinding()

	containerI := container.NewVBox(widgetI,
		container.NewHBox(checkIN, checkIP, checkIH))

	// ---------------- Availability (A) ----------------
	widgetA := widget.NewLabelWithStyle("Availability (A)", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})

	checkAN := widget.NewCheckWithData("None (N)", actCVEFilter.BindingData.FilterCVSSv2AN)
	checkAP := widget.NewCheckWithData("Partial (P)", actCVEFilter.BindingData.FilterCVSSv2AP)
	checkAH := widget.NewCheckWithData("Complete (C)", actCVEFilter.BindingData.FilterCVSSv2AC)
	waitForBinding()

	containerA := container.NewVBox(widgetA,
		container.NewHBox(checkAN, checkAP, checkAH))

	// ---------------- Conjunction selection of impact categories----------------
	widgetLC := widget.NewLabelWithStyle("Logical conjunction (of C,I,A):", fyne.TextAlignLeading, fyne.TextStyle{Bold: true})
	radioLC := widget.NewRadioGroup([]string{"AND", "OR"}, func(value string) {
		conjunctionImpact = value
	})
	radioLC.Selected = conjunctionImpact
	radioLC.Horizontal = true
	contLC := container.NewHBox(widgetLC, radioLC)

	// ---------------- Container complete ----------------
	log.Println("Container with the filter option for the CVSS metrics is created.")
	return container.NewVBox(customSpacerSm, containerAV, containerAC, containerAU, widget.NewSeparator(),
		container.NewHBox(container.NewVBox(containerC, containerI, containerA), layout.NewSpacer(), contLC))
}

// Is nowhere really described but probably necessary
// See https://github.com/fyne-io/fyne/blob/master/widget/check_test.go
// ToDo remove if the fix is integrated
func waitForBinding() {
	time.Sleep(time.Millisecond * 100) // data resolves on background thread
}
