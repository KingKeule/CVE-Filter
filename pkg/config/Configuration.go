package config

import (
	"encoding/json"
	"io/ioutil"
	"log"
	"os"
)

const ConfigFileName = "CVE-Filter.config"

func InitCVEFilter() CVEFilter {
	log.Printf("Try to read the configuration file \"%s\" from workspace.", ConfigFileName)
	configFileBytes, err := ioutil.ReadFile(ConfigFileName)
	workDirPath, _ := os.Getwd()

	if err != nil {
		log.Printf("No configuration file \"%s\" was found in the working directory (%s). Using the default filter.", ConfigFileName, workDirPath)
		return createDefaultCVEFilter()
	}

	log.Printf("Configuration file \"%s\" was found in the working directory (%s) and will be imported.", ConfigFileName, workDirPath)
	var actCVEFilterBool CVEFilterBool
	err = json.Unmarshal([]byte(configFileBytes), &actCVEFilterBool)
	if err != nil {
		log.Printf("Error while marshalling configuration file (%s): %s", ConfigFileName, err)
		return createDefaultCVEFilter()
	} else {
		var actCVEFilter CVEFilter
		actCVEFilter.BindingData = GetCVEFilterBind(actCVEFilterBool)
		return actCVEFilter
	}
}

// write the current CVE filter to file
func WriteCVEFilterToFile(actCVEFilter CVEFilter) bool {
	log.Printf("Try to write actual CVE filter to a configuration file \"%s\" in the workspace.", ConfigFileName)

	//marshal (pretty) to json structure
	jsonConfigData, err := json.MarshalIndent(GetCVEFilterBool(actCVEFilter.BindingData), "", "  ")
	if err != nil {
		log.Println(err)
		return true
	}

	err = ioutil.WriteFile(ConfigFileName, jsonConfigData, 0644)
	if err != nil {
		log.Println(err)
		return true
	} else {
		workDirPath, _ := os.Getwd()
		log.Printf("Configuration file \"%s\" was saved successfully in the working directory (%s).", ConfigFileName, workDirPath)
		return false
	}
}
