package config

import (
	"encoding/json"
	"log"
	"os"

	"fyne.io/fyne/v2/data/binding"
	"github.com/KingKeule/CVE-Filter/pkg/model"
)

const ConfigFileName = "CVE-Filter.config"
const Appname = "CVE-Filter"
const Version = "v0.9"
const GitHubLink = "https://github.com/KingKeule/CVE-Filter"
const CvssLink = "https://www.first.org/cvss/"
const nvdAPILink = "https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=" // API info: https://nvd.nist.gov/developers/vulnerabilities
const nvdDetailLink = "https://nvd.nist.gov/vuln/detail/"

func InitCVEFilter() CVEFilter {
	log.Printf("Try to read the configuration file \"%s\" from workspace.", ConfigFileName)
	configFileBytes, err := os.ReadFile(ConfigFileName)
	workDirPath, _ := os.Getwd()

	if err != nil {
		log.Printf("No configuration file \"%s\" was found in the working directory (%s). Using the default filter.", ConfigFileName, workDirPath)
		return createDefaultCVEFilter()
	}

	log.Printf("Configuration file \"%s\" was found in the working directory (%s) and will be imported.", ConfigFileName, workDirPath)
	var actCVEFilterBool CVEFilterBool
	err = json.Unmarshal([]byte(configFileBytes), &actCVEFilterBool)
	if err != nil {
		log.Printf("Error while marshalling configuration file (%s): %s", ConfigFileName, err)
		return createDefaultCVEFilter()
	} else {
		var actCVEFilter CVEFilter
		actCVEFilter.BindingData = GetCVEFilterBind(actCVEFilterBool)
		log.Println("The import of the existing CVE filter configuration file was successful.")
		return actCVEFilter
	}
}

func InitBindDataGui() model.BindingDataGui {
	var bindDataGui model.BindingDataGui

	bindDataGui.NVDApiURLData = binding.NewString()
	bindDataGui.NVDApiURLData.Set(nvdAPILink)

	bindDataGui.NVDDetailURLData = binding.NewString()
	bindDataGui.NVDDetailURLData.Set(nvdDetailLink)

	bindDataGui.DownloadDelaySecData = binding.NewString()
	bindDataGui.DownloadDelaySecData.Set("6")

	bindDataGui.NetworkTimeoutSecData = binding.NewString()
	bindDataGui.NetworkTimeoutSecData.Set("10")

	bindDataGui.ApiKey = binding.NewString()
	bindDataGui.ProxyData = binding.NewString()
	bindDataGui.LogNetworkRaw = binding.NewBool()

	return bindDataGui
}

// write the current CVE filter to file
func WriteCVEFilterToFile(actCVEFilter CVEFilter) bool {
	log.Printf("Try to write actual CVE filter to a configuration file \"%s\" in the workspace.", ConfigFileName)

	//marshal (pretty) to json structure
	jsonConfigData, err := json.MarshalIndent(GetCVEFilterBool(actCVEFilter.BindingData), "", "  ")
	if err != nil {
		log.Println(err)
		return true
	}

	err = os.WriteFile(ConfigFileName, jsonConfigData, 0644)
	if err != nil {
		log.Println(err)
		return true
	} else {
		workDirPath, _ := os.Getwd()
		log.Printf("Configuration file \"%s\" was saved successfully in the working directory (%s).", ConfigFileName, workDirPath)
		return false
	}
}
